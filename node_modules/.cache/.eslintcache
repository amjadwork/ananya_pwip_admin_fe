[{"/Users/himanshudahiya/Desktop/export-costing-fe/src/index.tsx":"1","/Users/himanshudahiya/Desktop/export-costing-fe/src/reportWebVitals.ts":"2","/Users/himanshudahiya/Desktop/export-costing-fe/src/App.tsx":"3","/Users/himanshudahiya/Desktop/export-costing-fe/src/screens/dashboard/index.tsx":"4","/Users/himanshudahiya/Desktop/export-costing-fe/src/layouts/AppLayout.tsx":"5","/Users/himanshudahiya/Desktop/export-costing-fe/src/components/SideNavBar/SideNavBar.tsx":"6","/Users/himanshudahiya/Desktop/export-costing-fe/src/components/Header/Header.tsx":"7","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Products/index.tsx":"8","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageProducts/index.tsx":"9","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Locations/index.tsx":"10","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Packaging/index.tsx":"11","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Playground/index.tsx":"12","/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/header.constants.tsx":"13","/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/sideNavBar.constants.tsx":"14","/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/sideNavBar.style.tsx":"15","/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/var.constants.tsx":"16","/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/header.style.tsx":"17","/Users/himanshudahiya/Desktop/export-costing-fe/src/components/Wrappers/PageWrapper.tsx":"18","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Products/AddProductForm.tsx":"19","/Users/himanshudahiya/Desktop/export-costing-fe/src/components/Card/Card.tsx":"20","/Users/himanshudahiya/Desktop/export-costing-fe/src/components/PageHeader/PageHeader.tsx":"21","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageProducts/EditProducts/EditProducts.tsx":"22","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Locations/EditLocationForm/index.tsx":"23","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Packaging/EditPackagingForm/index.tsx":"24","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Playground/ECForm/index.tsx":"25","/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/pageWrapper.style.tsx":"26","/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/pageHeader.style.tsx":"27","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageProducts/EditProducts/EditProductsForm.tsx":"28","/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/eceForm.constants.tsx":"29","/Users/himanshudahiya/Desktop/export-costing-fe/src/screens/login/LoginForm.tsx":"30","/Users/himanshudahiya/Desktop/export-costing-fe/src/screens/login/Otp.tsx":"31","/Users/himanshudahiya/Desktop/export-costing-fe/src/hoc/withAuth.js":"32","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageCha/index.tsx":"33","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageCha/EditCha/EditCha.tsx":"34","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageCha/EditCha/EditChaForm.tsx":"35","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOfc/index.tsx":"36","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOfc/EditOfc/EditOfc.tsx":"37","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOfc/EditOfc/EditOfcForm.tsx":"38","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageTransport/index.tsx":"39","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageTransport/EditTransport/EditTransportForm.tsx":"40","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageTransport/EditTransport/EditTransport.tsx":"41","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManagePwipService/index.tsx":"42","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManagePwipService/EditPwipService/EditPwipService.tsx":"43","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManagePwipService/EditPwipService/EditPwipServiceForm.tsx":"44","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOthers/index.tsx":"45","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOthers/EditOthers/EditOthers.tsx":"46","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOthers/EditOthers/EditOthersForm.tsx":"47","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageShl/index.tsx":"48","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageShl/EditShl/EditShl.tsx":"49","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageShl/EditShl/EditShlForm.tsx":"50"},{"size":841,"mtime":1670238488127,"results":"51","hashOfConfig":"52"},{"size":425,"mtime":1660564126000,"results":"53","hashOfConfig":"52"},{"size":649,"mtime":1670853145323,"results":"54","hashOfConfig":"52"},{"size":219,"mtime":1669804199556,"results":"55","hashOfConfig":"52"},{"size":3934,"mtime":1671627017157,"results":"56","hashOfConfig":"52"},{"size":4160,"mtime":1661456856607,"results":"57","hashOfConfig":"52"},{"size":2541,"mtime":1670392687233,"results":"58","hashOfConfig":"52"},{"size":3236,"mtime":1674049203238,"results":"59","hashOfConfig":"52"},{"size":7853,"mtime":1674064604552,"results":"60","hashOfConfig":"52"},{"size":6517,"mtime":1660780599000,"results":"61","hashOfConfig":"52"},{"size":6766,"mtime":1660780602000,"results":"62","hashOfConfig":"52"},{"size":1952,"mtime":1667831499736,"results":"63","hashOfConfig":"52"},{"size":177,"mtime":1660566086000,"results":"64","hashOfConfig":"52"},{"size":1291,"mtime":1671626810579,"results":"65","hashOfConfig":"52"},{"size":1060,"mtime":1660561947000,"results":"66","hashOfConfig":"52"},{"size":5941,"mtime":1672312562360,"results":"67","hashOfConfig":"52"},{"size":813,"mtime":1660561947000,"results":"68","hashOfConfig":"52"},{"size":1599,"mtime":1669368794372,"results":"69","hashOfConfig":"52"},{"size":4832,"mtime":1674116399353,"results":"70","hashOfConfig":"52"},{"size":1268,"mtime":1660571540000,"results":"71","hashOfConfig":"52"},{"size":2134,"mtime":1660597768000,"results":"72","hashOfConfig":"52"},{"size":10167,"mtime":1674200855341,"results":"73","hashOfConfig":"52"},{"size":7963,"mtime":1672312949596,"results":"74","hashOfConfig":"52"},{"size":2280,"mtime":1672734859324,"results":"75","hashOfConfig":"52"},{"size":8285,"mtime":1673351753035,"results":"76","hashOfConfig":"52"},{"size":226,"mtime":1660561947000,"results":"77","hashOfConfig":"52"},{"size":252,"mtime":1660597490000,"results":"78","hashOfConfig":"52"},{"size":6497,"mtime":1674200979043,"results":"79","hashOfConfig":"52"},{"size":6244,"mtime":1673249945021,"results":"80","hashOfConfig":"52"},{"size":3891,"mtime":1673333610763,"results":"81","hashOfConfig":"52"},{"size":6097,"mtime":1670394881759,"results":"82","hashOfConfig":"52"},{"size":1570,"mtime":1670223421814,"results":"83","hashOfConfig":"52"},{"size":7266,"mtime":1671201040197,"results":"84","hashOfConfig":"52"},{"size":8274,"mtime":1671200717141,"results":"85","hashOfConfig":"52"},{"size":7407,"mtime":1672735489096,"results":"86","hashOfConfig":"52"},{"size":7177,"mtime":1671433168104,"results":"87","hashOfConfig":"52"},{"size":8271,"mtime":1671201144951,"results":"88","hashOfConfig":"52"},{"size":5060,"mtime":1672736577078,"results":"89","hashOfConfig":"52"},{"size":7220,"mtime":1671627318421,"results":"90","hashOfConfig":"52"},{"size":4891,"mtime":1672736472342,"results":"91","hashOfConfig":"52"},{"size":8345,"mtime":1671432959606,"results":"92","hashOfConfig":"52"},{"size":7310,"mtime":1671429943958,"results":"93","hashOfConfig":"52"},{"size":8343,"mtime":1671430346466,"results":"94","hashOfConfig":"52"},{"size":4845,"mtime":1672735384147,"results":"95","hashOfConfig":"52"},{"size":6949,"mtime":1671626563684,"results":"96","hashOfConfig":"52"},{"size":8115,"mtime":1671626344360,"results":"97","hashOfConfig":"52"},{"size":2460,"mtime":1672736962742,"results":"98","hashOfConfig":"52"},{"size":7184,"mtime":1671627408386,"results":"99","hashOfConfig":"52"},{"size":8295,"mtime":1671627262067,"results":"100","hashOfConfig":"52"},{"size":7679,"mtime":1672736485119,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v95qcr",{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"108"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"108"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},"/Users/himanshudahiya/Desktop/export-costing-fe/src/index.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/reportWebVitals.ts",[],[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/App.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/screens/dashboard/index.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/layouts/AppLayout.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/components/SideNavBar/SideNavBar.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/components/Header/Header.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Products/index.tsx",["285","286"],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageProducts/index.tsx",["287","288"],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Locations/index.tsx",["289","290","291","292"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport EditLocationFormContainer from \"./EditLocationForm\";\n\nimport { locationCat } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return <PageHeader title=\"Manage Locations\" />;\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEdit = props.handleEdit;\n  const editModeActive = props.editModeActive || false;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEdit(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"lg\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button size=\"xs\" color=\"gray\" onClick={() => handleEdit(false)}>\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEdit(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEdit(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditLocationFormContainer />;\n};\n\nfunction LocationsContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState(false);\n\n  const handleEdit = (bool: boolean) => {\n    setEditModeActive(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEdit={handleEdit}\n          editModeActive={editModeActive}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle=\"Add a location\"\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => <RenderModalContent />}\n      modalSize=\"40%\"\n    >\n      <div style={{ width: \"100%\", height: \"auto\" }}>\n        <Group spacing=\"md\" grow>\n          {locationCat.map((cat: any, index: number) => {\n            return (\n              <SectionCard\n                key={index}\n                withBorder\n                radius=\"md\"\n                p=\"lg\"\n                component=\"a\"\n              >\n                <Group position=\"apart\">\n                  <Title order={3}>{cat.name}</Title>\n\n                  {editModeActive && (\n                    <ActionIcon\n                      variant=\"light\"\n                      color=\"blue\"\n                      sx={{\n                        \"&[data-disabled]\": { opacity: 0.4 },\n                      }}\n                      onClick={() => {\n                        setModalOpen(true);\n                      }}\n                    >\n                      <Plus size={14} />\n                    </ActionIcon>\n                  )}\n                </Group>\n                <Space h=\"xl\" />\n                <ScrollArea\n                  scrollbarSize={2}\n                  style={{ maxHeight: 380, height: 360 }}\n                >\n                  <List type=\"ordered\" spacing=\"lg\">\n                    {cat.list.map((d: any, i: number) => (\n                      <Box\n                        key={i}\n                        sx={(theme) => ({\n                          display: \"block\",\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[6]\n                              : \"#fff\",\n                          color:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[4]\n                              : theme.colors.dark[7],\n                          textAlign: \"left\",\n                          padding: theme.spacing.md,\n                          borderRadius: theme.radius.md,\n                          cursor: \"default\",\n\n                          \"&:hover\": {\n                            backgroundColor:\n                              theme.colorScheme === \"dark\"\n                                ? theme.colors.dark[5]\n                                : theme.colors.gray[1],\n                          },\n                        })}\n                      >\n                        <List.Item>{d.name}</List.Item>\n                      </Box>\n                    ))}\n                  </List>\n                </ScrollArea>\n              </SectionCard>\n            );\n          })}\n        </Group>\n      </div>\n    </PageWrapper>\n  );\n}\n\nexport default LocationsContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Packaging/index.tsx",["293","294","295","296","297"],[],"import React, { useEffect } from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport EditPackagingFormContainer from \"./EditPackagingForm\";\n\nimport { packagingBags } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return <PageHeader title=\"Manage Packaging\" />;\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEdit = props.handleEdit;\n  const editModeActive = props.editModeActive || false;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            handleEdit(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"lg\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEdit(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEdit(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => {\n        handleEdit(true);\n      }}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditPackagingFormContainer />;\n};\n\nfunction PackagingContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState(false);\n\n  const handleEdit = (bool: boolean) => {\n    setEditModeActive(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleEdit={handleEdit}\n          editModeActive={editModeActive}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle=\"Add a bag\"\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => <RenderModalContent />}\n      modalSize=\"40%\"\n    >\n      <div style={{ width: \"100%\", height: \"auto\" }}>\n        <Group spacing=\"md\" grow>\n          {packagingBags.map((cat: any, index: number) => {\n            return (\n              <SectionCard\n                key={index}\n                withBorder\n                radius=\"md\"\n                p=\"lg\"\n                component=\"a\"\n              >\n                <Group position=\"apart\">\n                  <Title order={3}>{cat.name}</Title>\n\n                  {editModeActive && (\n                    <ActionIcon\n                      variant=\"light\"\n                      color=\"blue\"\n                      sx={{\n                        \"&[data-disabled]\": { opacity: 0.4 },\n                      }}\n                      onClick={() => {\n                        setModalOpen(true);\n                      }}\n                    >\n                      <Plus size={14} />\n                    </ActionIcon>\n                  )}\n                </Group>\n                <Space h=\"xl\" />\n                <ScrollArea\n                  scrollbarSize={2}\n                  style={{ maxHeight: 380, height: 360 }}\n                >\n                  <List type=\"ordered\" spacing=\"lg\">\n                    {cat.list.map((d: any, i: number) => (\n                      <Box\n                        key={i}\n                        sx={(theme) => ({\n                          display: \"block\",\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[6]\n                              : \"#fff\",\n                          color:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[4]\n                              : theme.colors.dark[7],\n                          textAlign: \"left\",\n                          padding: theme.spacing.md,\n                          borderRadius: theme.radius.md,\n                          cursor: \"default\",\n\n                          \"&:hover\": {\n                            backgroundColor:\n                              theme.colorScheme === \"dark\"\n                                ? theme.colors.dark[5]\n                                : theme.colors.gray[1],\n                          },\n                        })}\n                      >\n                        <List.Item>\n                          {d.name} -{\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.weight}</span>\n                        </List.Item>\n                      </Box>\n                    ))}\n                  </List>\n                </ScrollArea>\n              </SectionCard>\n            );\n          })}\n        </Group>\n      </div>\n    </PageWrapper>\n  );\n}\n\nexport default PackagingContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Playground/index.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/header.constants.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/sideNavBar.constants.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/sideNavBar.style.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/var.constants.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/header.style.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/components/Wrappers/PageWrapper.tsx",["298"],[],"import React from \"react\";\nimport { Container, Modal, Grid, useMantineTheme } from \"@mantine/core\";\nimport { useStyles } from \"../../styles/components/pageWrapper.style\";\n\nconst PageWrapper = (props: any) => {\n  const { classes } = useStyles();\n\n  const theme = useMantineTheme();\n\n  const children = props.children;\n\n  const PageHeader = props.PageHeader;\n  const PageAction = props.PageAction;\n\n  const modalTitle = props.modalTitle;\n  const ModalContent = props.ModalContent;\n  const onModalClose = props.onModalClose;\n  const modalOpen = props.modalOpen;\n  const modalSize = props.modalSize || \"sm\";\n\n  return (\n    <Container>\n      <Grid gutter=\"xl\">\n        <Grid.Col span={12} className={classes.grid}>\n          <Grid justify=\"space-between\" align=\"flex-end\">\n            <Grid.Col sm={12} md={12} lg={3}>\n              <PageHeader />\n            </Grid.Col>\n            <Grid.Col\n              sm={12}\n              md={12}\n              lg={9}\n              style={{\n                width: \"100%\",\n                justifyContent: \"flex-end\",\n                display: \"inline-flex\",\n              }}\n            >\n              <PageAction />\n            </Grid.Col>\n          </Grid>\n        </Grid.Col>\n        <Grid.Col span={12}>{children}</Grid.Col>\n      </Grid>\n\n      {PageAction && modalOpen !== undefined && (\n        <Modal\n          size={modalSize}\n          centered\n          opened={modalOpen}\n          onClose={onModalClose}\n          title={modalTitle}\n        >\n          <ModalContent />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default PageWrapper;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Products/AddProductForm.tsx",["299","300","301","302","303","304","305"],[],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Button, TextInput, Space, ActionIcon, Group } from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { arrayBuffer } from \"stream/consumers\";\nimport axios from \"axios\";\nimport { DialogBody } from \"@mantine/core/lib/Dialog/Dialog\";\n// import ProductsContainer from \"./index\";\n\nfunction AddProductForm(props: any) {\n  const handleCloseModal = props.handleCloseModal;\n\n  const inputRef: any = useRef(null);\n\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n  const [allValue, setAllValue] = useState({});\n  // const [productId,setProductId]=React.useState<any>(null);\n  // console.log(productId,\"productId\");\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    initialValues: {\n      name: \"\",\n      imageURL: \"\",\n      categoriesList: \"\",\n    },\n\n    validate: {\n      name: (value) =>\n        value.length < 2 ? \"Name must have at least 2 letters\" : null,\n      imageURL: (value) =>\n        value.length === 0\n          ? null\n          : /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/.test(\n              value\n            )\n          ? null\n          : \"Invalid URL\",\n    },\n  });\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n\n  const handleClick:any = () => {\n    const arr: any = [...categoriesList];\n    const categoryObj = {\n      name: categoriesValue,\n    };\n    arr.push(categoryObj);\n    setCategoriesList(arr);\n\n    setCategoriesValue(\"\");\n    if (inputRef) {\n      inputRef.current.value = \"\";\n    }\n    \n  };\n\n \n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    // console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values, props: any) => {\n    const arr: any = [];\n    arr.push(values);\n    setAllValue(arr);\n\n    //post productApi\n    const payload = {\n      name: values.name,\n      image: values.imageURL,\n      status: \"live\",\n    };\n\n    axios\n      .post(\"http://localhost:8000/api/product\", payload, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((response: any) => {\n        console.log(response.data._id, \"post\");\n        //  setProductId(response.data._id);\n        //post categoryApi\n        const payloadCategory = {\n          _productId: response.data._id,\n          category: categoriesList,\n        };\n        axios\n          .post(\"http://localhost:8000/api/category\", payloadCategory)\n          .then((catRes: any) => {\n            console.log(\"response cat\", catRes);\n            handleCloseModal(false);\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Product name\"\n        placeholder=\"eg. Rice\"\n        {...form.getInputProps(\"name\")}\n      />\n\n      <Space h=\"sm\" />\n\n      <TextInput\n        label=\"Image Link\"\n        placeholder=\"eg. https://image-url.com/example-image.png\"\n        {...form.getInputProps(\"imageURL\")}\n      />\n\n      <Space h=\"sm\" />\n\n      {categoriesList.map((k: any, i) => {\n        return (\n          <Group spacing=\"md\">\n            <TextInput\n              defaultValue={k.name}\n              size=\"md\"\n              onChange={(e: any) => setCatUpdateValue(e.target.value)}\n              name={\"cat_update\"}\n            />\n            <Group spacing=\"md\" position=\"right\">\n              <ActionIcon variant=\"filled\" onClick={() => handleDeleteItem(i)}>\n                <Minus size={20} />\n              </ActionIcon>\n            </Group>\n          </Group>\n        );\n      })}\n\n      <TextInput\n        label=\"Categories\"\n        placeholder=\"eg. Categories\"\n        value={categoriesValue}\n        onChange={(event) => {\n          setCategoriesValue(event.target.value);\n        }}\n        ref={inputRef}\n      />\n      <Space h=\"md\" />\n      <Button onClick={handleClick}>+</Button>\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\" leftIcon={<Plus size={14} />}>\n          Add\n        </Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default AddProductForm;\n",[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/components/Card/Card.tsx",["306","307","308"],[],"import React from \"react\";\n\nimport {\n  Card as CardComponent,\n  Image,\n  Text,\n  Badge,\n  Button,\n  Group,\n  useMantineTheme,\n} from \"@mantine/core\";\n\nimport { useStyles } from \"../../styles/components/header.style\";\n\ninterface Props {\n  title: string;\n  status?: string;\n  onClickAction?: any;\n}\n\nconst Card: React.FC<Props> = ({ title, status, onClickAction }) => {\n  const { classes } = useStyles();\n  const theme = useMantineTheme();\n\n  return (\n    <CardComponent\n      shadow=\"sm\"\n      p=\"lg\"\n      radius=\"md\"\n      component=\"a\"\n      style={{ cursor: onClickAction ? \"pointer\" : \"default\" }}\n      withBorder\n      onClick={onClickAction ? onClickAction : () => null}\n    >\n      <CardComponent.Section>\n        <Image\n          src=\"https://images.unsplash.com/photo-1592997572594-34be01bc36c7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80\"\n          height={160}\n          alt=\"Norway\"\n        />\n      </CardComponent.Section>\n\n      <Group position=\"apart\" mt=\"md\" mb=\"xs\">\n        <Text weight={500}>{title}</Text>\n        {status && (\n          <Badge color=\"green\" variant=\"light\">\n            {status}\n          </Badge>\n        )}\n      </Group>\n    </CardComponent>\n  );\n};\n\nexport default Card;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/components/PageHeader/PageHeader.tsx",["309"],[],"import React from \"react\";\n\nimport {\n  RadioProps,\n  Radio,\n  Text,\n  Breadcrumbs,\n  Anchor,\n  useMantineTheme,\n} from \"@mantine/core\";\n\nimport { useStyles } from \"../../styles/components/pageHeader.style\";\n\ninterface Props {\n  title?: string;\n  label?: string;\n  radioOptions?: any;\n  handleRadioChange?: any;\n  activeFilter?: string | number;\n  breadcrumbs?: any;\n}\n\nconst PageHeader: React.FC<Props> = ({\n  title,\n  label,\n  radioOptions,\n  handleRadioChange,\n  activeFilter,\n  breadcrumbs = [],\n}) => {\n  const { classes } = useStyles();\n  const theme = useMantineTheme();\n\n  const itemsForBreadcrumbs = breadcrumbs.map((item: any, index: number) => (\n    <Anchor href={item.href} key={index}>\n      {item.title}\n    </Anchor>\n  ));\n\n  return (\n    <div>\n      <Text size=\"xl\" weight=\"bold\" color=\"gray\">\n        {title}\n      </Text>\n      {label && (\n        <Text size=\"xs\" weight=\"normal\" color={theme.colors.gray[6]}>\n          {label}\n        </Text>\n      )}\n\n      {radioOptions && (\n        <div className={classes.radioWrapper}>\n          <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n            {radioOptions.length > 0 &&\n              radioOptions.map((opt: any, index: number) => {\n                return (\n                  <Radio\n                    key={index}\n                    checked={index === activeFilter ? true : false}\n                    value={opt.value}\n                    label={opt.label}\n                    size=\"xs\"\n                    color=\"blue\"\n                    onChange={(value) => {\n                      handleRadioChange(value, index);\n                    }}\n                    style={{\n                      marginLeft: index !== 0 ? 12 : 0,\n                    }}\n                  />\n                );\n              })}\n          </div>\n        </div>\n      )}\n\n      {breadcrumbs && (\n        <div className={classes.breadcrumbWrapper}>\n          <div style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n            <Breadcrumbs>{itemsForBreadcrumbs}</Breadcrumbs>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PageHeader;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageProducts/EditProducts/EditProducts.tsx",["310","311","312"],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Locations/EditLocationForm/index.tsx",["313","314","315","316"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n} from \"@mantine/core\";\nimport { ArrowRightCircle, Category } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { locationCat } from \"../../../constants/var.constants\";\n// import { useNavigate } from \"react-router-dom\";\n// import EditLocationForm from \"./locForm\";\n\nfunction EditLocationFormContainer(props: any) {\n  const [fieldValue, setFieldValue] = useState(\"\");\n  const [state, setState] = useState(false);\n  // const [origin, setorigin] = useState(false);\n  const [select, setSelect] = useState(false);\n\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    initialValues: {\n      name: \"\",\n      category: \"\",\n      // regionName:\"\",\n      // cityName:\"\",\n      // portName:\"\",\n      // // source: \"\",\n      // // origin: \"\",\n      // destination: \"\",\n      // state: \"\",\n    },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    setFieldValue(values.category);\n    setState(true);\n    setSelect(true);\n    // setorigin(false);\n\n    console.log(\"arr 5\", values);\n\n    let arr: any = [];\n    if (values.name === \"Source Location\") {\n      arr = [...locationCat[0].list];\n      arr.push(values);\n      console.log(\"arr 1\", arr);\n    }\n    if (values.name === \"Origin Ports\") {\n      arr = [...locationCat[1].list];\n      arr.push(values);\n      console.log(\"arr 1\", arr);\n    } else {\n      arr = [...locationCat[2].list];\n      arr.push(values);\n      console.log(\"arr 3\", arr);\n    }\n  };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <Select\n        required\n        label=\"Select location type\"\n        placeholder=\"Eg. Source\"\n        disabled={select}\n        data={[\n          { value: \"source\", label: \"Source\" },\n          { value: \"origin\", label: \"Origin\" },\n          { value: \"destination\", label: \"Destination\" },\n        ]}\n        {...form.getInputProps(\"category\")}\n      />\n      <Space h=\"md\" />\n      <Group position=\"right\" mt=\"md\" spacing=\"md\"> \n        <Button type=\"submit\" disabled={state}>Next</Button>\n      </Group>\n\n     { \n       (fieldValue ===\"source\")? \n       <>\n       <TextInput\n        required\n         label=\"Region Name\"\n        placeholder=\"eg. Kolkata\"\n        {...form.getInputProps(\"name\")}\n        />\n      <Space h=\"md\" />\n       <Select\n         required\n        label=\"State Name\"\n        data={[\n          { value: \"Andhra Pradesh\", label: \"Andhra Pradesh\" },\n          { value: \"Andaman & Nicobar Islands\", label: \"Andaman & Nicobar Islands\" },\n          { value: \"Arunachal Pradesh\", label: \"Arunachal Pradesh\" },\n          { value: \"Assam\", label: \"Assam\" },\n          { value: \"Bihar\", label: \"Bihar\" },\n          { value: \"Chhattisgarh\", label: \"Chhattisgarh\" },\n          { value: \"Haryana\", label: \"Haryana\" },\n          { value: \"Punjab\", label: \"Punjab\" },\n          { value: \"Rajasthan\", label: \"Rajasthan \" },\n          { value: \"Gujarat\", label: \"Gujarat \" },\n          { value: \"Madhya Pradesh\", label: \"Madhya Pradesh\" },\n          { value: \"Utter Pradesh\", label: \"Utter Pradesh\" },\n          { value: \"Jharkhand\", label: \"Jharkhand\" },\n          { value: \"West Bengal\", label: \"West Bengal\" },\n          { value: \"Karnataka\", label: \"Karnataka\" },\n          { value: \"Kerala\", label: \"Kerala \" },\n          { value: \"Tamil Nadu\", label: \"Tamil Nadu\" },\n          { value: \"Himachal Pradesh\", label: \"Himachal Pradesh\" },\n          { value: \"Jammu & Kashmir\", label: \"Jammu & Kashmir\" },\n          { value: \"Maharashtra\", label: \"Maharashtra\" },\n          { value: \"Odisha\", label: \"Odisha\" },\n          { value: \"Uttarakhand\", label: \"Uttarakhand\" },\n          { value: \"Telangana\", label: \"Telangana\" },\n          { value: \"Tripura\", label: \"Tripura\" },\n          { value: \"Sikkim\", label: \"Sikkim\" },\n          { value: \"Nagaland\", label: \"Nagaland\" },\n          { value: \"Mizoram\", label: \"Mizoram\" },\n          { value: \"Meghalaya\", label: \"Meghalaya\" },\n          { value: \"Lakshadweep\", label: \"Lakshadweep\" },\n          { value: \"Goa\", label: \"Goa\" },\n        ]}\n         placeholder=\"eg. Haryana\"\n        {...form.getInputProps(\"state\")}\n       />\n       <Space h=\"md\" />\n      <Group position=\"right\" mt=\"md\" spacing=\"md\"> \n        <Button type=\"submit\">Submit</Button>\n      </Group>\n      </>: null}\n\n      {(fieldValue===\"origin\") ?(\n      <>\n      <TextInput\n        required\n        \n        label=\"Enter Port Name\"\n        placeholder=\"eg. JNPT\"\n        {...form.getInputProps(\"Port\")}\n      />\n      <Space h=\"md\" />\n      <TextInput\n        required\n        \n        label=\"Enter CFS Station\"\n        placeholder=\"eg. Chennai cfs\"\n        {...form.getInputProps(\"cfs\")}\n      />\n      <Space h=\"md\" />\n      <TextInput\n        required\n        \n        label=\"Enter City Name\"\n        placeholder=\"eg. Kolkata\"\n        {...form.getInputProps(\"City\")}\n      />\n      <Space h=\"md\" />\n      <Select\n        required\n        data={[\n          { value: \"Andhra Pradesh\", label: \"Andhra Pradesh\" },\n          { value: \"Andaman & Nicobar Islands\", label: \"Andaman & Nicobar Islands\" },\n          { value: \"Arunachal Pradesh\", label: \"Arunachal Pradesh\" },\n          { value: \"Assam\", label: \"Assam\" },\n          { value: \"Bihar\", label: \"Bihar\" },\n          { value: \"Chhattisgarh\", label: \"Chhattisgarh\" },\n          { value: \"Haryana\", label: \"Haryana\" },\n          { value: \"Punjab\", label: \"Punjab\" },\n          { value: \"Rajasthan\", label: \"Rajasthan \" },\n          { value: \"Gujarat\", label: \"Gujarat \" },\n          { value: \"Madhya Pradesh\", label: \"Madhya Pradesh\" },\n          { value: \"Utter Pradesh\", label: \"Utter Pradesh\" },\n          { value: \"Jharkhand\", label: \"Jharkhand\" },\n          { value: \"West Bengal\", label: \"West Bengal\" },\n          { value: \"Karnataka\", label: \"Karnataka\" },\n          { value: \"Kerala\", label: \"Kerala \" },\n          { value: \"Tamil Nadu\", label: \"Tamil Nadu\" },\n          { value: \"Himachal Pradesh\", label: \"Himachal Pradesh\" },\n          { value: \"Jammu & Kashmir\", label: \"Jammu & Kashmir\" },\n          { value: \"Maharashtra\", label: \"Maharashtra\" },\n          { value: \"Odisha\", label: \"Odisha\" },\n          { value: \"Uttarakhand\", label: \"Uttarakhand\" },\n          { value: \"Telangana\", label: \"Telangana\" },\n          { value: \"Tripura\", label: \"Tripura\" },\n          { value: \"Sikkim\", label: \"Sikkim\" },\n          { value: \"Nagaland\", label: \"Nagaland\" },\n          { value: \"Mizoram\", label: \"Mizoram\" },\n          { value: \"Meghalaya\", label: \"Meghalaya\" },\n          { value: \"Lakshadweep\", label: \"Lakshadweep\" },\n          { value: \"Goa\", label: \"Goa\" },\n        ]}\n        label=\"Enter State Name\"\n        placeholder=\"eg. Maharashtra\"\n        {...form.getInputProps(\"State\")}\n      />\n      <Space h=\"md\" />\n      <Group position=\"right\" mt=\"md\" spacing=\"md\"> \n        <Button type=\"submit\">Submit</Button>\n      </Group>\n      </>): null}\n\n      <Space h=\"md\" />\n      {(fieldValue ===\"destination\")?(\n      <>\n      <TextInput\n        required\n        \n        label=\"Enter Port Name\"\n        placeholder=\"eg. JNPT\"\n        {...form.getInputProps(\"Port\")}\n      />\n      <TextInput\n        required\n        \n        label=\"Enter Country Name\"\n        placeholder=\"eg. Vietnam\"\n        {...form.getInputProps(\"country\")}\n      />\n      <Space h=\"md\" />\n      <Group position=\"right\" mt=\"md\" spacing=\"md\"> \n        <Button type=\"submit\">Submit</Button>\n      </Group>\n      </>):null}\n\n    </form>\n  );\n}\n\nexport default EditLocationFormContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Packaging/EditPackagingForm/index.tsx",["317","318","319"],[],"import React, { useEffect } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n} from \"@mantine/core\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { packagingBags } from \"../../../constants/var.constants\";\n\nfunction EditPackagingFormContainer(props: any) {\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    initialValues: {\n      name: \"\",\n      category: \"\",\n      // source: \"\",\n      // origin: \"\",\n      // destination: \"\",\n      // exMillPrice: \"\",\n      // transportation: \"\",\n    },\n\n    validate: {\n      name: (value) =>\n        value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    },\n  });\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    let arr: any = [];\n    if (values.category === \"ppwoven\") {\n      arr = [...packagingBags[0].list];\n      arr.push(values);\n      console.log(\"arr 1\", arr);\n    } else {\n      arr = [...packagingBags[1].list];\n      arr.push(values);\n      console.log(\"arr 2\", arr);\n    }\n  };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <Select\n        required\n        label=\"Select Bag\"\n        placeholder=\"Eg. BOPP\"\n        data={[\n          { value: \"bopp\", label: \"BOPP\" },\n          { value: \"ppwoven\", label: \"PPWOVEN\" },\n        ]}\n        {...form.getInputProps(\"category\")}\n      />\n\n      <Space h=\"md\" />\n\n      <NumberInput\n        required\n        label=\"Weight (in KG)\"\n        placeholder=\"eg. 18\"\n        {...form.getInputProps(\"name\")}\n      />\n\n      <Space h=\"md\" />\n\n      <NumberInput\n        required\n        label=\"Cost per bag\"\n        placeholder=\"eg. 18\"\n        {...form.getInputProps(\"costPerBag\")}\n      />\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\" spacing=\"md\">\n        <Button type=\"button\" color=\"blue\" variant=\"subtle\">\n          Save & add another\n        </Button>\n        <Button type=\"submit\">Add</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditPackagingFormContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/Playground/ECForm/index.tsx",["320","321","322","323","324","325"],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/pageWrapper.style.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/styles/components/pageHeader.style.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageProducts/EditProducts/EditProductsForm.tsx",["326","327","328","329","330","331","332","333","334"],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/constants/eceForm.constants.tsx",[],[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/screens/login/LoginForm.tsx",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351"],[],"import React, { useState, useEffect } from \"react\";\nimport { Center, AspectRatio, Image, Group } from \"@mantine/core\";\nimport { useForm } from \"@mantine/form\";\nimport { Container } from \"@mantine/core\";\nimport { TextInput, Grid, Box, Card } from \"@mantine/core\";\nimport { Button, SimpleGrid, Loader, Space, Text } from \"@mantine/core\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Otp from \"./Otp\";\nimport { Notification } from \"@mantine/core\";\n\nimport { showNotification } from \"@mantine/notifications\";\nimport axios from \"axios\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\nimport { setConstantValue } from \"typescript\";\n\nconst Login = () => {\n  const Router = useNavigate();\n\n  const [values, setValues] = useState(\"\");\n  // const [validation, setValidation] = useState(true);\n\n  // console.log(api);\n\n  const initialFormState: any = {\n    clearInputErrorOnChange: true,\n    initialValues: {\n      values: \"\",\n    },\n    validate: {\n      mobileNumber: (values: any) =>\n        // const stringValue = `${values}`;\n        values.length < 10 || values.length > 10\n          ? \" MobileNumber must have 10* digit \"\n          : null,\n    },\n  };\n\n   const form: any = useForm(initialFormState);\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.values) {\n      showNotification({\n        message: \"Please fill valid mobileNumber\",\n        color: \"red\",\n      });\n    }\n  };\n\n  const handleSubmit = (e:React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"values\", typeof values);\n    console.log(\"creating payload\");\n    const payload = {\n      mobileNumber: values,\n      userType: \"admin\",\n    };\n    \n    \n    console.log(\"hitting api\");\n    axios\n      .post(\"https://uat.pwip.co/user/public/initiate/signin\", payload)\n      .then((res: any) => {\n        console.log(res);\n        if (res.data.data.data.type === \"success\") {\n          console.log(res);\n         \n          showNotification({\n              title: \"OTP sent succesfully\",\n               message: \"\",\n              autoClose: 1000,\n             })\n            \n            Router('/otp');\n          \n         \n        }\n      })\n      .catch((error) => {\n        console.log(\"got error\");\n        console.log(error.res.data.error);\n      });\n  };\n\n  return (\n    <form\n    // onSubmit={form.onSubmit(handleSubmit, handleError)}\n    >\n      <>\n        <AspectRatio ratio={290 / 182} sx={{ maxWidth: 300 }} mx=\"auto\">\n          <img src=\"https://admin-uat.pwip.co/assets/logo.png\"></img>\n        </AspectRatio>\n        <Space h={80} />\n\n        <Card p=\"lg\" component=\"div\" radius=\"md\" withBorder>\n          <Grid>\n            <Grid.Col span={6} offset={5}>\n              <Text>Login on EC Admin</Text>\n            </Grid.Col>\n            <Space h={80} />\n            <Grid.Col span={4} offset={4}>\n              <TextInput\n                placeholder=\"XXXXX-XXXXX\"\n                label=\"Enter Mobile Number\"\n                type=\"number\"\n                size=\"md\"\n                radius=\"lg\"\n                error={values.length > 10|| values.length <10}\n                onChange={(e) => {\n                  // console.log(\"enter mobileNumber\" , e.target.value);\n                  setValues(e.target.value);\n                  console.log(values, \"setting value\");\n                }}\n                // {...form.getInputProps(mobileNumber)}\n              />\n            </Grid.Col>\n\n            <Grid.Col span={2} offset={4}>\n              <Button\n                radius=\"xl\"\n                size=\"xs\"\n                type=\"submit\"\n                variant=\"outline\"\n                onClick={handleSubmit}\n              >\n                Request Otp\n              </Button>\n            </Grid.Col>\n          </Grid>\n        </Card>\n      </>\n    </form>\n  );\n};\n\nexport default Login;\n",[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/screens/login/Otp.tsx",["352","353","354","355","356","357","358","359","360","361","362","363","364","365"],[],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Center, AspectRatio, Image, Group } from \"@mantine/core\";\nimport { useForm } from \"@mantine/form\";\nimport { Container } from \"@mantine/core\";\nimport { TextInput, Grid, Box, Card } from \"@mantine/core\";\nimport { Button, SimpleGrid, Loader, Space, Text } from \"@mantine/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport DashboardScreen from \"../dashboard\";\n\nimport { showNotification } from \"@mantine/notifications\";\nimport axios from \"axios\";\nimport { OutputFileType } from \"typescript\";\n// import { isDisabled } from \"@testing-library/user-event/dist/utils\";\n\nconst Otp = (props: any) => {\n  const Router = useNavigate();\n  const [timer, setTimer] = useState(60);\n\n  const [otp, setOtp] = useState(\"\");\n\n  const [disable, setDisable] = useState(true);\n\n  const timeOutCallback = useCallback(\n    () => setTimer((currTimer) => currTimer - 1),\n    []\n  );\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     ref.currTimer.click();\n  //   }, 60000); //miliseconds\n  // }, []);\n\n  // console.log(timer);\n\n  useEffect(() => {\n    timer > 0 && setTimeout(timeOutCallback, 1000);\n\n    timer === 0 ? setDisable(false) : setDisable(true);\n\n    // if (timer === 0) {\n    //   setDisable(false);\n    // }else{\n    //   setDisable(true);\n    // }\n  }, [timer, timeOutCallback]);\n\n  // const handleClick = ()=>{\n  //   Router(\"/Otp\", { replace: true });\n  // }\n\n  const resetTimer = () => {\n    if (!timer) {\n      setTimer(60);\n    }\n  };\n\n  // const [authVerified, setAuthVerified] = useState(false);\n  // console.log(\"authVerified\",authVerified);\n  // let [modelOpen, setModelOpen] = useState(false);\n\n  const initialFormState: any = {\n    // clearInputErrorOnChange: true,\n    // initialValues: {\n    //   otp: \"\",\n    // },\n    validate: {\n      otp: (values: any) =>\n        values.length < 4 || values.length > 4\n          ? \"Otp must have 4* digit \"\n          : null,\n    },\n  };\n\n  const form: any = useForm(initialFormState);\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.otp) {\n      showNotification({\n        message: \"otp have only 4* digit number\",\n        color: \"red\",\n      });\n    }\n  };\n\n  const handleReset = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const payload: any = {\n      mobileNumber: \"9902156864\",\n      userType: \"admin\",\n    };\n\n    axios\n      .post(\"https://uat.pwip.co/user/public/resendotp\", payload)\n      .then((res: any) => {\n        console.log(res);\n        if (res.data.type === \"success\") {\n          console.log(res);\n\n          showNotification({\n            title: \"OTP sent succesfully again\",\n            message: \"\",\n            autoClose: 1500,\n          });\n        }\n      });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const payload: any = {\n      otp: otp,\n      userType: \"admin\",\n      grant_type: \"password\",\n      username: \"9902156864\",\n    };\n    let formData = new FormData(); //formdata object\n\n    formData.append(\"otp\", otp); //append the values with key, value pair\n    formData.append(\"userType\", \"admin\");\n    formData.append(\"grant_type\", \"password\");\n    formData.append(\"username\", \"9902156864\");\n\n    axios\n      .post(\"https://uat.pwip.co/oauth/token\", formData, {\n        headers: {\n          Authorization: \"Basic YW5ndWxhci1jbGllbnQ6YW5ndWxhci1zZWNyZXQ=\",\n        },\n      })\n      .then((res: any) => {\n        console.log(res);\n        if (res.status === 200) {\n          localStorage.setItem(\"access_token\", res.data.access_token);\n          showNotification({\n            title: \"Logged In Succesfully\",\n            message: \"\",\n            autoClose: 1000,\n          });\n\n          Router(\"/admin/dashboard\");\n        }\n        //  else if (res.status === 400) {\n        //     showNotification({\n        //       title: \"Otp Wrong\",\n        //       message: \"error\",\n        //        autoClose: 1000,\n        //     })\n        //   }\n      })\n      .catch((error) => {\n        console.log(\"got error\");\n        showNotification({\n          title: \"Your OTP is incorrect, Please try again\",\n          message: \"\",\n          autoClose: 1000,\n        });\n        console.log(error.res.data.error);\n      });\n  };\n\n  return (\n    <form\n    // onSubmit={form.onSubmit(handleSubmit, handleError)}\n    >\n      <>\n        <AspectRatio ratio={290 / 182} sx={{ maxWidth: 300 }} mx=\"auto\">\n          <img src=\"https://admin-uat.pwip.co/assets/logo.png\"></img>\n        </AspectRatio>\n        <Space h={80} />\n\n        <Card withBorder p=\"xl\" component=\"div\">\n          <Grid>\n            <Grid.Col span={6} offset={5}>\n              <Text>Login on EC Admin</Text>\n            </Grid.Col>\n            <Space h={80} />\n            <Grid.Col span={4} offset={4}>\n              <TextInput\n                placeholder=\"xxxx\"\n                label=\"Enter OTP\"\n                type=\"number\"\n                size=\"md\"\n                radius=\"lg\"\n                // maxLength=\"4\"\n                error={otp.length > 4 || otp.length < 4}\n                onChange={(e) => {\n                  console.log(\"enter otp\", e.target.value);\n                  setOtp(e.target.value);\n                }}\n                // {...form.getInputProps(\"otp\")}\n              />\n            </Grid.Col>\n\n            <Grid.Col span={2} offset={4}>\n              <Button\n                radius=\"xl\"\n                size=\"xs\"\n                type=\"button\"\n                onClick={handleSubmit}\n              >\n                submit\n              </Button>\n            </Grid.Col>\n\n            <Grid.Col span={1}>\n              <Button\n                disabled={disable}\n                radius=\"xl\"\n                size=\"xs\"\n                type=\"button\"\n                onClick={handleReset}\n              >\n                Resend Otp\n              </Button>\n            </Grid.Col>\n            <Grid.Col span={5} offset={4}>\n              <Text>Resend OTP in ({timer})</Text>\n            </Grid.Col>\n          </Grid>\n        </Card>\n      </>\n    </form>\n  );\n};\n\nexport default Otp;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/hoc/withAuth.js",["366"],[],"\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\n\n\nconst withAuth = (WrappedComponent) => {\n\n  return (props) => {\n    const navigate = useNavigate();\n    \n    const [authVerified, setAuthVerified] = useState(false);\n\n    useEffect( () => {\n      const accessToken = localStorage.getItem(\"access_token\");\n      console.log(\"access_token\");\n      // if no accessToken was found,then we redirect to \"/\" page.\n      if (!accessToken) {\n       \n        window.location.href = '/'\n      } else {\n        setAuthVerified(true);\n      }\n    }, []);\n\n    if (authVerified) {\n      return <WrappedComponent {...props} />;\n    } else {\n      return null;\n    }\n  };\n}\n\n\n  // \n  // const [authVerified, setAuthVerified] = useState(false);\n  // console.log(authVerified)\n\n  // // const PrivateRoute = ({ redirectTo, component , isAuth }) => {\n  // //   return isAuth ?  component : <Navigate to={redirectTo} />;\n  // // };\n  // useEffect(() => {\n  //   const accessToken = localStorage.getItem(\"access_token\");\n  //   // if no accessToken was found,then we redirect to \"/\" page.\n  //   if (!accessToken) {\n  //     navigate('/', { replace: true });\n\n  //   } else {\n  //     setAuthVerified(true);\n  //     // navigate('/admin/dashboard', { replace: true });\n  //   //  < Navigate to={<DashboardScreen/>}/>\n  //   }\n  // }, []);\n\n\n  // return () => {\n   \n\n   \n\n    // if (authVerified) {\n    //   return <\n    //       DashboardScreen \n    //        />;\n    // } else {\n    //   return null;\n    // }\n \n\n\n\n\n\nexport default withAuth;\n\n\n\n",[],"/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageCha/index.tsx",["367","368","369","370"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Input,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check } from \"tabler-icons-react\";\n\nimport EditChaContainer from \"./EditCha/EditCha\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport { manageCha, riceCategory } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage CHA Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEditAction(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => handleEditAction(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nfunction ManageChaContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState<boolean>(false);\n  const [modalType, setModalType] = React.useState<string>(\"edit\");\n\n  const handleEditAction = (bool: boolean) => {\n    setEditModeActive(() => bool);\n    setModalType(\"edit\");\n  };\n\n  const handleEditToUpdateAction = () => {\n    setModalType(\"update\");\n    setModalOpen(true);\n  };\n\n  if (editModeActive) {\n    return (\n      <EditChaContainer\n        editModeActive={editModeActive}\n        handleEditAction={(bool: boolean) => setEditModeActive(() => bool)}\n        modalType={modalType}\n        modalOpen={modalOpen}\n        handleEditToUpdateAction={handleEditToUpdateAction}\n      />\n    );\n  }\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEditAction={handleEditAction}\n          editModeActive={editModeActive}\n        />\n      )}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>CHA Charges</Title>\n         <Input\n              placeholder=\"Search\"/> \n          {/* <Badge size=\"lg\" color=\"green\" variant=\"light\">\n            Live\n          </Badge> */}\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageCha.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <List.Item>\n                          {d.name}  - RS{\" \"}\n                          <span style={{ fontWeight: \"800\" }}>{d.price}</span>\n                        </List.Item>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default ManageChaContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageCha/EditCha/EditCha.tsx",["371","372","373","374"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Select,\n  Space,\n  Title,\n  Input,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\n\nimport EditChaForm from \"./EditChaForm\";\n\nimport { manageCha } from \"../../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage CHA Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            console.log(\"here\");\n            handleEditAction(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEditAction(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditChaForm />;\n};\n\nfunction EditChaContainer(props: any) {\n  const editModeActive = props.editModeActive;\n  const handleEditAction = props.handleEditAction;\n  const modalType = props.modalType || \"edit\";\n  const handleEditToUpdateAction = props.handleEditToUpdateAction;\n\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n\n  const handleSave = (bool: boolean) => {\n    handleEditAction(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          editModeActive={editModeActive}\n          handleEditAction={handleSave}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle={\n        modalType === \"edit\"\n          ? \"Add CHA Charges\"\n          : \"Update CHA Charges\"\n      }\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => {\n        if (modalType === \"edit\") {\n          return <RenderModalContent />;\n        }\n\n        if (modalType === \"update\") {\n          return <RenderModalContent />;\n        }\n      }}\n      modalSize=\"70%\"\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>CHA Charges</Title>\n          <Group spacing=\"md\">\n            <Input\n              placeholder=\"Search\"\n            />\n            <Button\n              type=\"submit\"\n              leftIcon={<Plus size={14} />}\n              onClick={() => setModalOpen(true)}\n            >\n              Add\n            </Button>\n          </Group>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageCha.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <Group position=\"apart\">\n                      <List.Item>\n                          {d.name} -RS{\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.price}</span>\n                        </List.Item>\n\n                        <ActionIcon\n                          variant=\"outline\"\n                          color=\"gray\"\n                          size=\"sm\"\n                          sx={{\n                            \"&[data-disabled]\": { opacity: 0.4 },\n                          }}\n                          onClick={() => {\n                            handleEditToUpdateAction();\n                            setModalOpen(true);\n                            console.log(d);\n                          }}\n                        >\n                          <Pencil size={12} />\n                        </ActionIcon>\n                      </Group>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default EditChaContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageCha/EditCha/EditChaForm.tsx",["375","376","377","378","379","380","381","382","383","384"],[],"import React, { useState } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n  Grid,\n  ActionIcon,\n} from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { manageCha } from \"../../../constants/var.constants\";\n\nfunction EditChaForm(props: any) {\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n\n  const [allValue, setAllValue] = useState({});\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    initialValues: {\n      name: \"\",\n      category: \"\",\n      city: \"\",\n      state: \"\",\n      // destination: \"\",\n      exmill: \"\",\n      // transportation: \"\",\n    },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleClick: any = () => {\n    const arr: any = [...categoriesList];\n    arr.push(categoriesValue);\n    console.log(arr);\n    setCategoriesList(arr);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    console.log(arr);\n  };\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n  const handleUpdate = (index: number) => {\n    const arr: any = [...categoriesList];\n    arr[index] = catUpdateValue;\n\n    setCategoriesList(arr);\n\n    console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    console.log(values, \"values\");\n  };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Enter Origin Port\"\n        placeholder=\"Eg. chennai\"\n        {...form.getInputProps(\"originPort\")}\n      />\n \n      <Space h=\"md\" />\n      {categoriesList.map((k, i) => {\n        return (\n          <Group spacing=\"md\" key={i}>\n            <TextInput\n              required\n              label=\"Enter Destination Port\"\n              placeholder=\"Eg. singapore\"\n              data={[]}\n              {...form.getInputProps(\"destination\")}\n            />\n\n            <NumberInput\n              required\n              label=\"Enter CHA Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"cha\")}\n            />\n            <NumberInput\n              required\n              label=\"Craft Paper\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"craft\")}\n            />\n\n            <NumberInput\n              required\n              label=\"Silica Gel\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"silica\")}\n            />\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"bottom\",\n                // width: \"100%\",\n                marginTop: `3%`,\n              }}\n            >\n              <Group spacing=\"md\" position=\"right\" margin-bottom=\"5px\">\n                <ActionIcon\n                  variant=\"filled\"\n                  onClick={() => handleDeleteItem(i)}\n                >\n                  <Minus size={20} />\n                </ActionIcon>\n              </Group>\n            </div>\n\n            <Grid>\n              \n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"Transport Charge\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"transportation\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"Loading Charge\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"loading\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"Custom Charge\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"custom\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"PQC\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"pqc\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"COO\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"coo\")}\n                />\n              </Grid.Col>\n            </Grid>\n          </Group>\n        );\n      })}\n\n      <Space h=\"md\" />\n\n      <Group>\n        <TextInput\n          required\n          label=\"Enter Destination port\"\n          placeholder=\"Eg. Karnal\"\n          data={[]}\n          {...form.getInputProps(\"destination\")}\n        />\n\n        <NumberInput\n          required\n          label=\"Enter CHA Charges\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"cha\")}\n        />\n        <NumberInput\n          required\n          label=\"Craft Paper\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"craft\")}\n        />\n        <NumberInput\n          required\n          label=\"Silica Gel\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"silica\")}\n        />\n        <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"bottom\",\n            // width: \"100%\",\n            marginTop: `3%`,\n          }}\n        >\n          <Button onClick={handleClick}>+</Button>\n        </div>\n\n        <Grid>\n         \n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"Transport Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"transportation\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"Loading Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"loading\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"Custom Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"custom\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"PQC\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"pqc\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"COO\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"coo\")}\n            />\n          </Grid.Col>\n        </Grid>\n      </Group>\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\">Save</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditChaForm;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOfc/index.tsx",["385","386","387","388"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Space,\n  Title,\n  Badge,\n  Input,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check } from \"tabler-icons-react\";\n\nimport EditOfcContainer from \"./EditOfc/EditOfc\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport { manageCha, riceCategory } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage OFC Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEditAction(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => handleEditAction(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nfunction ManageOfcContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState<boolean>(false);\n  const [modalType, setModalType] = React.useState<string>(\"edit\");\n\n  const handleEditAction = (bool: boolean) => {\n    setEditModeActive(() => bool);\n    setModalType(\"edit\");\n  };\n\n  const handleEditToUpdateAction = () => {\n    setModalType(\"update\");\n    setModalOpen(true);\n  };\n\n  if (editModeActive) {\n    return (\n      <EditOfcContainer\n        editModeActive={editModeActive}\n        handleEditAction={(bool: boolean) => setEditModeActive(() => bool)}\n        modalType={modalType}\n        modalOpen={modalOpen}\n        handleEditToUpdateAction={handleEditToUpdateAction}\n      />\n    );\n  }\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEditAction={handleEditAction}\n          editModeActive={editModeActive}\n        />\n      )}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>OFC Charges</Title>\n          <Input\n              placeholder=\"Search\"\n            />\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageCha.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <List.Item>\n                          {d.name}  - RS{\" \"}\n                          <span style={{ fontWeight: \"800\" }}>{d.price}</span>\n                        </List.Item>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default ManageOfcContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOfc/EditOfc/EditOfc.tsx",["389","390","391","392"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Input,\n  Select,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\n\nimport EditSllForm from \"./EditOfcForm\";\n\nimport { manageCha } from \"../../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage OFC Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            console.log(\"here\");\n            handleEditAction(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEditAction(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditSllForm />;\n};\n\nfunction EditChaContainer(props: any) {\n  const editModeActive = props.editModeActive;\n  const handleEditAction = props.handleEditAction;\n  const modalType = props.modalType || \"edit\";\n  const handleEditToUpdateAction = props.handleEditToUpdateAction;\n\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n\n  const handleSave = (bool: boolean) => {\n    handleEditAction(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          editModeActive={editModeActive}\n          handleEditAction={handleSave}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle={\n        modalType === \"edit\"\n          ? \"Add OFC Charges\"\n          : \"Update OFC Charges\"\n      }\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => {\n        if (modalType === \"edit\") {\n          return <RenderModalContent />;\n        }\n\n        if (modalType === \"update\") {\n          return <RenderModalContent />;\n        }\n      }}\n      modalSize=\"70%\"\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>OFC Charges</Title>\n          <Group spacing=\"md\">\n          <Input\n              placeholder=\"Search\"\n            />\n            <Button\n              type=\"submit\"\n              leftIcon={<Plus size={14} />}\n              onClick={() => setModalOpen(true)}\n            >\n              Add\n            </Button>\n          </Group>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageCha.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <Group position=\"apart\">\n                      <List.Item>\n                          {d.name} -RS{\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.price}</span>\n                        </List.Item>\n\n                        <ActionIcon\n                          variant=\"outline\"\n                          color=\"gray\"\n                          size=\"sm\"\n                          sx={{\n                            \"&[data-disabled]\": { opacity: 0.4 },\n                          }}\n                          onClick={() => {\n                            handleEditToUpdateAction();\n                            setModalOpen(true);\n                            console.log(d);\n                          }}\n                        >\n                          <Pencil size={12} />\n                        </ActionIcon>\n                      </Group>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default EditChaContainer;","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOfc/EditOfc/EditOfcForm.tsx",["393","394","395","396","397","398","399","400","401"],[],"import React, { useState } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n  ActionIcon,\n} from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { manageCha } from \"../../../constants/var.constants\";\n\nfunction EditChaForm(props: any) {\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n\n  const [allValue, setAllValue] = useState({});\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    // initialValues: {\n    //   name: \"\",\n    //   category: \"\",\n    //   city: \"\",\n    //   state: \"\",\n    //   // destination: \"\",\n    //   exmill: \"\",\n    //   // transportation: \"\",\n    // },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleClick: any = () => {\n    const arr: any = [...categoriesList];\n    arr.push(categoriesValue);\n    console.log(arr);\n    setCategoriesList(arr);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    console.log(arr);\n  };\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n  const handleUpdate = (index: number) => {\n    const arr: any = [...categoriesList];\n    arr[index] = catUpdateValue;\n\n    setCategoriesList(arr);\n\n    console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    console.log(values, \"values\");\n  };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Enter Origin Port\"\n        placeholder=\"Eg. chennai\"\n        \n        {...form.getInputProps(\"origin\")}\n      />\n\n      <Space h=\"md\" />\n\n      \n\n      <Space h=\"md\" />\n      {categoriesList.map((k, i) => {\n        return (\n          <Group spacing=\"md\" key={i}>\n            <Select\n              required\n              label=\"Enter Destination Port\"\n              placeholder=\"Eg. singapore\"\n              data={[]}\n              {...form.getInputProps(\"destination\")}\n            />\n\n            <NumberInput\n              required\n              label=\"Enter OFC Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"ofc\")}\n            />\n\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"bottom\",\n                // width: \"100%\",\n                marginTop: `3%`,\n              }}\n            >\n              <Group spacing=\"md\" position=\"right\" margin-bottom=\"10px\">\n                <ActionIcon\n                  variant=\"filled\"\n                  onClick={() => handleDeleteItem(i)}\n                >\n                  <Minus size={20} />\n                </ActionIcon>\n              </Group>\n            </div>\n            {/* <Group spacing=\"md\" position=\"right\" margin-bottom=\"10px\">\n              <ActionIcon variant=\"filled\" onClick={() => handleDeleteItem(i)}>\n                <Minus size={20}/>\n              </ActionIcon> */}\n            {/* <ActionIcon\n                variant=\"filled\"\n                disabled={false}\n                onClick={() => handleUpdate(i)}\n              >\n                // {/* <Check size={20} /> */}\n            {/* </ActionIcon> */}\n            {/* </Group> */}\n          </Group>\n        );\n      })}\n\n      <Space h=\"md\" />\n\n      <Group spacing=\"md\" grow>\n        <Select\n          required\n          label=\"Enter Destination port\"\n          placeholder=\"Eg. Karnal\"\n          data={[]}\n          {...form.getInputProps(\"destination\")}\n        />\n\n        <NumberInput\n          required\n          label=\"Enter OFC charge\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"ofc\")}\n        />\n\n        <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"bottom\",\n            width: \"100%\",\n            marginTop: `3%`,\n          }}\n        >\n          <Button onClick={handleClick}>+</Button>\n          {/* <ArrowRightCircle size={24} style={{ marginTop: `14%` }} />\n          <Space w=\"md\" /> */}\n          {/* <Select\n            required\n            label=\"Destination Port\"\n            placeholder=\"Eg. SINGAPORE\"\n            style={{\n              width: \"100%\",\n            }}\n            data={[]}\n            {...form.getInputProps(\"destination\")} \n           /> */}\n        </div>\n      </Group>\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\">Save</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditChaForm;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageTransport/index.tsx",["402","403","404"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Space,\n  Title,\n  Input,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check } from \"tabler-icons-react\";\n\nimport EditTransportContainer from \"./EditTransport/EditTransport\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport { manageTransport} from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage Transportation Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEditAction(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => handleEditAction(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nfunction ManageTransportContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState<boolean>(false);\n  const [modalType, setModalType] = React.useState<string>(\"edit\");\n\n  const handleEditAction = (bool: boolean) => {\n    setEditModeActive(() => bool);\n    setModalType(\"edit\");\n  };\n\n  const handleEditToUpdateAction = () => {\n    setModalType(\"update\");\n    setModalOpen(true);\n  };\n\n  if (editModeActive) {\n    return (\n      <EditTransportContainer\n        editModeActive={editModeActive}\n        handleEditAction={(bool: boolean) => setEditModeActive(() => bool)}\n        modalType={modalType}\n        modalOpen={modalOpen}\n        handleEditToUpdateAction={handleEditToUpdateAction}\n      />\n    );\n  }\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEditAction={handleEditAction}\n          editModeActive={editModeActive}\n        />\n      )}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>Transportation Charges</Title>\n          <Input\n              placeholder=\"Search\"/> \n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageTransport.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <List.Item>\n                          {d.name}  - RS{\" \"}\n                          <span style={{ fontWeight: \"800\" }}>{d.price}</span>\n                        </List.Item>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default ManageTransportContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageTransport/EditTransport/EditTransportForm.tsx",["405","406","407","408","409","410","411","412","413","414"],[],"import React, { useState } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n  ActionIcon,\n} from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { manageTransport } from \"../../../constants/var.constants\";\n\nfunction EditTransportForm(props: any) {\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n\n  const [allValue, setAllValue] = useState({});\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    // initialValues: {\n    //   name: \"\",\n    //   category: \"\",\n    //   city: \"\",\n    //   state: \"\",\n    //   // destination: \"\",\n    //   exmill: \"\",\n    //   // transportation: \"\",\n    // },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleClick: any = () => {\n    const arr: any = [...categoriesList];\n    arr.push(categoriesValue);\n    console.log(arr);\n    setCategoriesList(arr);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    console.log(arr);\n  };\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n  const handleUpdate = (index: number) => {\n    const arr: any = [...categoriesList];\n    arr[index] = catUpdateValue;\n\n    setCategoriesList(arr);\n\n    console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    let arr: any = [];\n    console.log(values, \"values\");\n\n  //   if (values.category=== \"Basmati\") {\n  //     arr = [...manageCha[0].list];\n  //     arr.push(values);\n  //     console.log(\"arr 1\", arr);\n  //   } else {\n  //     arr = [...manageCha[1].list];\n  //     arr.push(values);\n  //     console.log(\"arr 2\", arr);\n  //   }\n   };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Enter CFS Station \"\n        placeholder=\"Eg. chennai cfs\"\n       \n        {...form.getInputProps(\"originPort\")}\n      />\n\n      \n\n      <Space h=\"md\" />\n      {categoriesList.map((k, i) => {\n        return (\n          <Group spacing=\"md\" key={i}>\n            <Select\n              required\n              label=\"Enter Source Location\"\n              placeholder=\"Eg. karnal \"\n              data={[]}\n              {...form.getInputProps(\"source\")}\n            />\n\n            <NumberInput\n              required\n              label=\"Enter Transport Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"transport\")}\n            />\n\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"bottom\",\n                // width: \"100%\",\n                marginTop: `3%`,\n              }}\n            >\n              <Group spacing=\"md\" position=\"right\" margin-bottom=\"10px\">\n                <ActionIcon\n                  variant=\"filled\"\n                  onClick={() => handleDeleteItem(i)}\n                >\n                  <Minus size={20} />\n                </ActionIcon>\n              </Group>\n            </div>\n          \n          </Group>\n        );\n      })}\n\n      <Space h=\"md\" />\n\n      <Group spacing=\"md\" grow>\n        <Select\n          required\n          label=\"Enter Source Location\"\n          placeholder=\"Eg. Karnal\"\n          data={[]}\n          {...form.getInputProps(\"source\")}\n        />\n\n        <NumberInput\n          required\n          label=\"Enter Transport charges\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"transport\")}\n        />\n\n        <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"bottom\",\n            width: \"100%\",\n            marginTop: `3%`,\n          }}\n        >\n          <Button onClick={handleClick}>+</Button>\n          {/* <ArrowRightCircle size={24} style={{ marginTop: `14%` }} />\n          <Space w=\"md\" /> */}\n          {/* <Select\n            required\n            label=\"Destination Port\"\n            placeholder=\"Eg. SINGAPORE\"\n            style={{\n              width: \"100%\",\n            }}\n            data={[]}\n            {...form.getInputProps(\"destination\")} \n           /> */}\n        </div>\n      </Group>\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\">Save</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditTransportForm;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageTransport/EditTransport/EditTransport.tsx",["415","416","417","418"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Input,\n  Select,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\n\nimport EditTransportForm from \"./EditTransportForm\";\n\nimport { manageTransport } from \"../../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage Transportation Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            console.log(\"here\");\n            handleEditAction(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEditAction(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditTransportForm />;\n};\n\nfunction EditTransportContainer(props: any) {\n  const editModeActive = props.editModeActive;\n  const handleEditAction = props.handleEditAction;\n  const modalType = props.modalType || \"edit\";\n  const handleEditToUpdateAction = props.handleEditToUpdateAction;\n\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n\n  const handleSave = (bool: boolean) => {\n    handleEditAction(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          editModeActive={editModeActive}\n          handleEditAction={handleSave}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle={\n        modalType === \"edit\"\n          ? \"Add Transportation Charges\"\n          : \"Update Transportation Charges\"\n      }\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => {\n        if (modalType === \"edit\") {\n          return <RenderModalContent />;\n        }\n\n        if (modalType === \"update\") {\n          return <RenderModalContent />;\n        }\n      }}\n      modalSize=\"70%\"\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>Transportation Charges</Title>\n          <Group spacing=\"md\">\n          <Input\n              placeholder=\"Search\"/> \n            <Button\n              type=\"submit\"\n              leftIcon={<Plus size={14} />}\n              onClick={() => setModalOpen(true)}\n            >\n              Add\n            </Button>\n          </Group>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageTransport.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <Group position=\"apart\">\n                      <List.Item>\n                          {d.name} -RS{\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.price}</span>\n                        </List.Item>\n\n                        <ActionIcon\n                          variant=\"outline\"\n                          color=\"gray\"\n                          size=\"sm\"\n                          sx={{\n                            \"&[data-disabled]\": { opacity: 0.4 },\n                          }}\n                          onClick={() => {\n                            handleEditToUpdateAction();\n                            setModalOpen(true);\n                            console.log(d);\n                          }}\n                        >\n                          <Pencil size={12} />\n                        </ActionIcon>\n                      </Group>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default EditTransportContainer;","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManagePwipService/index.tsx",["419","420","421"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Input,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check } from \"tabler-icons-react\";\n\nimport EditChaContainer from \"./EditPwipService/EditPwipService\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport { managePwipService } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage PWIP Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEditAction(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => handleEditAction(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nfunction ManagePwipServiceContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState<boolean>(false);\n  const [modalType, setModalType] = React.useState<string>(\"edit\");\n\n  const handleEditAction = (bool: boolean) => {\n    setEditModeActive(() => bool);\n    setModalType(\"edit\");\n  };\n\n  const handleEditToUpdateAction = () => {\n    setModalType(\"update\");\n    setModalOpen(true);\n  };\n\n  if (editModeActive) {\n    return (\n      <EditChaContainer\n        editModeActive={editModeActive}\n        handleEditAction={(bool: boolean) => setEditModeActive(() => bool)}\n        modalType={modalType}\n        modalOpen={modalOpen}\n        handleEditToUpdateAction={handleEditToUpdateAction}\n      />\n    );\n  }\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEditAction={handleEditAction}\n          editModeActive={editModeActive}\n        />\n      )}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>PWIP Service Charges</Title>\n         <Input\n              placeholder=\"Search\"/> \n          {/* <Badge size=\"lg\" color=\"green\" variant=\"light\">\n            Live\n          </Badge> */}\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {managePwipService.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <List.Item>\n                          {d.name}  - RS{\" \"}\n                          <span style={{ fontWeight: \"800\" }}>{d.price}</span>\n                        </List.Item>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default ManagePwipServiceContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManagePwipService/EditPwipService/EditPwipService.tsx",["422","423","424","425"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Select,\n  Space,\n  Title,\n  Input,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\n\nimport EditChaForm from \"./EditPwipServiceForm\";\n\nimport { managePwipService } from \"../../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage PWIP Services\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            console.log(\"here\");\n            handleEditAction(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEditAction(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditChaForm />;\n};\n\nfunction EditPwipServiceContainer(props: any) {\n  const editModeActive = props.editModeActive;\n  const handleEditAction = props.handleEditAction;\n  const modalType = props.modalType || \"edit\";\n  const handleEditToUpdateAction = props.handleEditToUpdateAction;\n\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n\n  const handleSave = (bool: boolean) => {\n    handleEditAction(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          editModeActive={editModeActive}\n          handleEditAction={handleSave}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle={\n        modalType === \"edit\"\n          ? \"Add PWIP Service Charges\"\n          : \"Update PWIP Service Charges\"\n      }\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => {\n        if (modalType === \"edit\") {\n          return <RenderModalContent />;\n        }\n\n        if (modalType === \"update\") {\n          return <RenderModalContent />;\n        }\n      }}\n      modalSize=\"70%\"\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>PWIP Service Charges</Title>\n          <Group spacing=\"md\">\n            <Input\n              placeholder=\"Search\"\n            />\n            <Button\n              type=\"submit\"\n              leftIcon={<Plus size={14} />}\n              onClick={() => setModalOpen(true)}\n            >\n              Add\n            </Button>\n          </Group>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {managePwipService.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <Group position=\"apart\">\n                      <List.Item>\n                          {d.name} -RS{\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.price}</span>\n                        </List.Item>\n\n                        <ActionIcon\n                          variant=\"outline\"\n                          color=\"gray\"\n                          size=\"sm\"\n                          sx={{\n                            \"&[data-disabled]\": { opacity: 0.4 },\n                          }}\n                          onClick={() => {\n                            handleEditToUpdateAction();\n                            setModalOpen(true);\n                            console.log(d);\n                          }}\n                        >\n                          <Pencil size={12} />\n                        </ActionIcon>\n                      </Group>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default EditPwipServiceContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManagePwipService/EditPwipService/EditPwipServiceForm.tsx",["426","427","428","429","430","431","432","433","434","435","436","437"],[],"import React, { useState } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n  Grid,\n  ActionIcon,\n} from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { managePwipService } from \"../../../constants/var.constants\";\n\nfunction EditPwipServiceForm(props: any) {\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n\n  const [allValue, setAllValue] = useState({});\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    // initialValues: {\n    //   name: \"\",\n    //   category: \"\",\n    //   city: \"\",\n    //   state: \"\",\n    //   // destination: \"\",\n    //   exmill: \"\",\n    //   transportation: \"\",\n    // },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleClick: any = () => {\n    const arr: any = [...categoriesList];\n    arr.push(categoriesValue);\n    console.log(arr);\n    setCategoriesList(arr);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    console.log(arr);\n  };\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n  const handleUpdate = (index: number) => {\n    const arr: any = [...categoriesList];\n    arr[index] = catUpdateValue;\n\n    setCategoriesList(arr);\n\n    console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    let arr: any = [];\n\n  }\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Enter PWIP Services Charges\"\n        placeholder=\"Eg. chennai\"\n        {...form.getInputProps(\"originPort\")}\n      />\n\n      <Space h=\"md\" />\n\n      <Space h=\"md\" />\n      {categoriesList.map((k, i) => {\n        return (\n          <Group spacing=\"md\" key={i}>\n            <NumberInput\n              required\n              label=\"Order value\"\n              placeholder=\"Eg. singapore\"\n              {...form.getInputProps(\"order\")}\n            />\n\n            <NumberInput\n              required\n              label=\"Sourcing \"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"sourcing\")}\n            />\n            <NumberInput\n              required\n              label=\"Logistics \"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"logistics\")}\n            />\n\n            <NumberInput\n              required\n              label=\"Others\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"others\")}\n            />\n\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"bottom\",\n                // width: \"100%\",\n                marginTop: `3%`,\n              }}\n            >\n              <Group spacing=\"md\" position=\"right\" margin-bottom=\"10px\">\n                <ActionIcon\n                  variant=\"filled\"\n                  onClick={() => handleDeleteItem(i)}\n                >\n                  <Minus size={20} />\n                </ActionIcon>\n              </Group>\n            </div>\n           \n          </Group>\n        );\n      })}\n\n      <Space h=\"md\" />\n\n      <Group spacing=\"md\" grow>\n        <NumberInput\n          required\n          label=\"Order value\"\n          placeholder=\"Eg. 780\"\n          data={[]}\n          {...form.getInputProps(\"order\")}\n        />\n\n        <NumberInput\n          required\n          label=\"Sourcing\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"sourcing\")}\n        />\n        <NumberInput\n          required\n          label=\"Logistics\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"logistics\")}\n        />\n        <NumberInput\n          required\n          label=\"Others\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"others\")}\n        />\n\n        <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"bottom\",\n            width: \"100%\",\n            marginTop: `3%`,\n          }}\n        >\n          <Button onClick={handleClick}>+</Button>\n         \n        </div>\n      </Group>\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\">Save</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditPwipServiceForm;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOthers/index.tsx",["438","439","440","441"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Space,\n  Title,\n  Input,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check } from \"tabler-icons-react\";\n\nimport EditOthersContainer from \"./EditOthers/EditOthers\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\nimport { manageOthers } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return <PageHeader title=\"Manage Others\" />;\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEditAction(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => handleEditAction(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nfunction ManageOthersContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState<boolean>(false);\n  const [modalType, setModalType] = React.useState<string>(\"edit\");\n\n  const handleEditAction = (bool: boolean) => {\n    setEditModeActive(() => bool);\n    setModalType(\"edit\");\n  };\n\n  const handleEditToUpdateAction = () => {\n    setModalType(\"update\");\n    setModalOpen(true);\n  };\n\n  if (editModeActive) {\n    return (\n      <EditOthersContainer\n        editModeActive={editModeActive}\n        handleEditAction={(bool: boolean) => setEditModeActive(() => bool)}\n        modalType={modalType}\n        modalOpen={modalOpen}\n        handleEditToUpdateAction={handleEditToUpdateAction}\n      />\n    );\n  }\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEditAction={handleEditAction}\n          editModeActive={editModeActive}\n        />\n      )}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>Others Charges</Title>\n          \n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageOthers.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <List.Item>\n                        {d.name} {\" \"}\n                        <span style={{ fontWeight: \"800\" }}>{d.price}</span>\n                      </List.Item>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default ManageOthersContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOthers/EditOthers/EditOthers.tsx",["442","443","444","445","446"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Input,\n  Select,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\n\nimport EditOthersForm from \"./EditOthersForm\";\n\nimport { manageOthers } from \"../../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return <PageHeader title=\"Manage Others\" />;\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            console.log(\"here\");\n            handleEditAction(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEditAction(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditOthersForm />;\n};\n\nfunction EditOthersContainer(props: any) {\n  const editModeActive = props.editModeActive;\n  const handleEditAction = props.handleEditAction;\n  const modalType = props.modalType || \"edit\";\n  const handleEditToUpdateAction = props.handleEditToUpdateAction;\n\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n\n  const handleSave = (bool: boolean) => {\n    handleEditAction(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          editModeActive={editModeActive}\n          handleEditAction={handleSave}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle={\n        modalType === \"edit\"\n          ? \"Add Others Charges\"\n          : \"Update Others Charges\"\n      }\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => {\n        if (modalType === \"edit\") {\n          return <RenderModalContent />;\n        }\n\n        if (modalType === \"update\") {\n          return <RenderModalContent />;\n        }\n      }}\n      modalSize=\"70%\"\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>Export Duty --20%</Title>\n          <Group spacing=\"md\">\n            {/* <Input placeholder=\"Search\" /> */}\n            <Button\n              type=\"submit\"\n              leftIcon={<Plus size={14} />}\n              onClick={() => setModalOpen(true)}\n            >\n              Add\n            </Button>\n          </Group>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageOthers.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <Group position=\"apart\">\n                        <List.Item>\n                          {d.name} {\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.price}</span>\n                        </List.Item>\n\n                        <ActionIcon\n                          variant=\"outline\"\n                          color=\"gray\"\n                          size=\"sm\"\n                          sx={{\n                            \"&[data-disabled]\": { opacity: 0.4 },\n                          }}\n                          onClick={() => {\n                            handleEditToUpdateAction();\n                            setModalOpen(true);\n                            console.log(d);\n                          }}\n                        >\n                          <Pencil size={12} />\n                        </ActionIcon>\n                      </Group>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default EditOthersContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageOthers/EditOthers/EditOthersForm.tsx",["447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462"],[],"import React, { useState } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n  ActionIcon,\n} from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { manageOthers } from \"../../../constants/var.constants\";\n\nfunction EditOthersForm(props: any) {\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n\n  const [allValue, setAllValue] = useState({});\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    // initialValues: {\n    //   name: \"\",\n    //   category: \"\",\n    //   city: \"\",\n    //   state: \"\",\n    //   // destination: \"\",\n    //   exmill: \"\",\n    //   // transportation: \"\",\n    // },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleClick: any = () => {\n    const arr: any = [...categoriesList];\n    arr.push(categoriesValue);\n    console.log(arr);\n    setCategoriesList(arr);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    console.log(arr);\n  };\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n  const handleUpdate = (index: number) => {\n    const arr: any = [...categoriesList];\n    arr[index] = catUpdateValue;\n\n    setCategoriesList(arr);\n\n    console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    let arr: any = [];\n    console.log(values, \"values\");\n\n  \n   };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Enter Others Charges\"\n        placeholder=\"Eg. 20% Export Duty\"\n        {...form.getInputProps(\"others\")}\n      />\n\n      <Space h=\"md\" />\n\n      \n\n      \n\n      <Space h=\"md\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\">Save</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditOthersForm;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageShl/index.tsx",["463","464","465"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Space,\n  Title,\n  Badge,\n  Input,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check } from \"tabler-icons-react\";\n\nimport EditShlContainer from \"./EditShl/EditShl\";\n\nimport PageWrapper from \"../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../components/PageHeader/PageHeader\";\n\nimport { manageCha } from \"../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage Shipping Line Locals Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => handleEditAction(false)}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => handleEditAction(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nfunction ManageShlContainer() {\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n  const [editModeActive, setEditModeActive] = React.useState<boolean>(false);\n  const [modalType, setModalType] = React.useState<string>(\"edit\");\n\n  const handleEditAction = (bool: boolean) => {\n    setEditModeActive(() => bool);\n    setModalType(\"edit\");\n  };\n\n  const handleEditToUpdateAction = () => {\n    setModalType(\"update\");\n    setModalOpen(true);\n  };\n\n  if (editModeActive) {\n    return (\n      <EditShlContainer\n        editModeActive={editModeActive}\n        handleEditAction={(bool: boolean) => setEditModeActive(() => bool)}\n        modalType={modalType}\n        modalOpen={modalOpen}\n        handleEditToUpdateAction={handleEditToUpdateAction}\n      />\n    );\n  }\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          handleActionClick={() => setModalOpen(true)}\n          handleEditAction={handleEditAction}\n          editModeActive={editModeActive}\n        />\n      )}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>Shipping Line Locals Charges</Title>\n          <Input\n              placeholder=\"Search\"/>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageCha.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <List.Item>\n                          {d.name}  - RS{\" \"}\n                          <span style={{ fontWeight: \"800\" }}>{d.price}</span>\n                        </List.Item>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default ManageShlContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageShl/EditShl/EditShl.tsx",["466","467","468","469"],[],"import React from \"react\";\nimport {\n  SimpleGrid,\n  Box,\n  ActionIcon,\n  Group,\n  Popover,\n  Text,\n  Button,\n  Select,\n  Input,\n  Space,\n  Title,\n  Badge,\n  Card as SectionCard,\n  List,\n  ScrollArea,\n} from \"@mantine/core\";\nimport { Pencil, X, Check, Plus } from \"tabler-icons-react\";\n\nimport PageWrapper from \"../../../components/Wrappers/PageWrapper\";\nimport PageHeader from \"../../../components/PageHeader/PageHeader\";\n\nimport EditShlForm from \"./EditShlForm\";\n\nimport { manageCha } from \"../../../constants/var.constants\";\n\nconst RenderPageHeader = (props: any) => {\n  const activeFilter = props.activeFilter;\n  const handleRadioChange = props.handleRadioChange;\n\n  return (\n    <PageHeader\n      title=\"Manage Shipping Line Local Charges\"\n      // breadcrumbs={[\n      //   { title: \"Products\", href: \"/admin/dashboard/products\" },\n      //   { title: \"Manage\", href: \"#\" },\n      // ]}\n    />\n  );\n};\n\nconst RenderPageAction = (props: any) => {\n  const handleSaveAction = props.handleSaveAction;\n  const handleEditAction = props.handleEditAction;\n  const editModeActive = props.editModeActive;\n\n  if (editModeActive) {\n    return (\n      <Group position=\"right\" spacing=\"md\">\n        <ActionIcon\n          variant=\"filled\"\n          color=\"gray\"\n          sx={{\n            \"&[data-disabled]\": { opacity: 0.4 },\n          }}\n          onClick={() => {\n            console.log(\"here\");\n            handleEditAction(false);\n          }}\n        >\n          <X size={16} />\n        </ActionIcon>\n\n        <Popover\n          width={250}\n          trapFocus\n          position=\"bottom-end\"\n          withArrow\n          shadow=\"md\"\n        >\n          <Popover.Target>\n            <ActionIcon\n              variant=\"filled\"\n              color=\"blue\"\n              sx={{\n                \"&[data-disabled]\": { opacity: 0.4 },\n              }}\n            >\n              <Check size={16} />\n            </ActionIcon>\n          </Popover.Target>\n          <Popover.Dropdown\n            sx={(theme) => ({\n              background:\n                theme.colorScheme === \"dark\"\n                  ? theme.colors.dark[7]\n                  : theme.white,\n            })}\n          >\n            <Text size=\"sm\">Are you sure you want to save the changes</Text>\n            <Space h=\"sm\" />\n            <Group position=\"right\" spacing=\"md\">\n              <Button\n                size=\"xs\"\n                color=\"gray\"\n                onClick={() => {\n                  handleEditAction(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"blue\"\n                onClick={() => {\n                  if (handleSaveAction) {\n                    handleSaveAction();\n                  }\n                  handleEditAction(false);\n                }}\n              >\n                Save\n              </Button>\n            </Group>\n          </Popover.Dropdown>\n        </Popover>\n      </Group>\n    );\n  }\n\n  return (\n    <ActionIcon\n      variant=\"filled\"\n      color=\"gray\"\n      sx={{\n        \"&[data-disabled]\": { opacity: 0.4 },\n      }}\n      onClick={() => handleEditAction(true)}\n    >\n      <Pencil size={16} />\n    </ActionIcon>\n  );\n};\n\nconst RenderModalContent = (props: any) => {\n  return <EditShlForm />;\n};\n\nfunction EditShlContainer(props: any) {\n  const editModeActive = props.editModeActive;\n  const handleEditAction = props.handleEditAction;\n  const modalType = props.modalType || \"edit\";\n  const handleEditToUpdateAction = props.handleEditToUpdateAction;\n\n  const [activeFilter, setActiveFilter] = React.useState<any>(null);\n  const [modalOpen, setModalOpen] = React.useState<any>(false);\n\n  const handleSave = (bool: boolean) => {\n    handleEditAction(bool);\n  };\n\n  return (\n    <PageWrapper\n      PageHeader={() => (\n        <RenderPageHeader\n          activeFilter={activeFilter}\n          handleRadioChange={(value: any, index: number) =>\n            setActiveFilter(index)\n          }\n        />\n      )}\n      PageAction={() => (\n        <RenderPageAction\n          editModeActive={editModeActive}\n          handleEditAction={handleSave}\n        />\n      )}\n      modalOpen={modalOpen}\n      modalTitle={\n        modalType === \"edit\" ? \"Add Shipping Line Local Charges\" : \"Update Shipping Line Local Charges\"\n      }\n      onModalClose={() => setModalOpen(false)}\n      ModalContent={() => {\n        if (modalType === \"edit\") {\n          return <RenderModalContent />;\n        }\n\n        if (modalType === \"update\") {\n          return <RenderModalContent />;\n        }\n      }}\n      modalSize=\"70%\"\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"block\",\n          backgroundColor:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[6]\n              : theme.colors.gray[1],\n          color:\n            theme.colorScheme === \"dark\"\n              ? theme.colors.dark[4]\n              : theme.colors.dark[7],\n          textAlign: \"center\",\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          cursor: \"default\",\n        })}\n      >\n        <Group position=\"apart\">\n          <Title order={1}>Shipping Line Locals Charges</Title>\n          <Group spacing=\"md\">\n            <Input placeholder=\"Search\" />\n            <Button\n              type=\"submit\"\n              leftIcon={<Plus size={14} />}\n              onClick={() => setModalOpen(true)}\n            >\n              Add\n            </Button>\n          </Group>\n        </Group>\n      </Box>\n\n      <Space h=\"lg\" />\n\n      <SimpleGrid cols={2}>\n        {manageCha.map((cat: any, index: number) => {\n          return (\n            <SectionCard\n              key={index}\n              withBorder\n              radius=\"md\"\n              p=\"lg\"\n              component=\"a\"\n            >\n              <Title order={3}>{cat.name}</Title>\n              <Space h=\"xl\" />\n              <ScrollArea\n                scrollbarSize={2}\n                style={{ maxHeight: 380, height: 360 }}\n              >\n                <List type=\"ordered\" spacing=\"lg\">\n                  {cat.list.map((d: any, i: number) => (\n                    <Box\n                      key={i}\n                      sx={(theme) => ({\n                        display: \"block\",\n                        backgroundColor:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[6]\n                            : \"#fff\",\n                        color:\n                          theme.colorScheme === \"dark\"\n                            ? theme.colors.dark[4]\n                            : theme.colors.dark[7],\n                        textAlign: \"left\",\n                        padding: theme.spacing.md,\n                        borderRadius: theme.radius.md,\n                        cursor: \"default\",\n\n                        \"&:hover\": {\n                          backgroundColor:\n                            theme.colorScheme === \"dark\"\n                              ? theme.colors.dark[5]\n                              : theme.colors.gray[1],\n                        },\n                      })}\n                    >\n                      <Group position=\"apart\">\n                        <List.Item>\n                          {d.name} -RS{\" \"}\n                          <span style={{ fontWeight: \"600\" }}>{d.price}</span>\n                        </List.Item>\n\n                        <ActionIcon\n                          variant=\"outline\"\n                          color=\"gray\"\n                          size=\"sm\"\n                          sx={{\n                            \"&[data-disabled]\": { opacity: 0.4 },\n                          }}\n                          onClick={() => {\n                            handleEditToUpdateAction();\n                            setModalOpen(true);\n                            console.log(d);\n                          }}\n                        >\n                          <Pencil size={12} />\n                        </ActionIcon>\n                      </Group>\n                    </Box>\n                  ))}\n                </List>\n              </ScrollArea>\n            </SectionCard>\n          );\n        })}\n      </SimpleGrid>\n    </PageWrapper>\n  );\n}\n\nexport default EditShlContainer;\n","/Users/himanshudahiya/Desktop/export-costing-fe/src/containers/ManageShl/EditShl/EditShlForm.tsx",["470","471","472","473","474","475","476","477","478","479","480"],[],"import React, { useState } from \"react\";\nimport {\n  Group,\n  Button,\n  TextInput,\n  NumberInput,\n  Select,\n  Space,\n  Grid,\n  ActionIcon,\n} from \"@mantine/core\";\nimport { Plus, Minus, Check } from \"tabler-icons-react\";\nimport { ArrowRightCircle } from \"tabler-icons-react\";\nimport { useForm } from \"@mantine/form\";\nimport { showNotification } from \"@mantine/notifications\";\nimport { manageCha } from \"../../../constants/var.constants\";\n\nfunction EditShlForm(props: any) {\n  const [categoriesValue, setCategoriesValue] = useState(\"\");\n  const [catUpdateValue, setCatUpdateValue] = useState(\"\");\n  const [categoriesList, setCategoriesList] = useState([]);\n\n  const [allValue, setAllValue] = useState({});\n\n  const form = useForm({\n    clearInputErrorOnChange: true,\n    // initialValues: {\n    //   name: \"\",\n    //   category: \"\",\n    //   city: \"\",\n    //   state: \"\",\n    //   // destination: \"\",\n    //   exmill: \"\",\n    //   // transportation: \"\",\n    // },\n\n    // validate: {\n    //   name: (value) =>\n    //     value.length < 2 ? \"Name must have at least 2 letters\" : null,\n    // },\n  });\n\n  const handleClick: any = () => {\n    const arr: any = [...categoriesList];\n    arr.push(categoriesValue);\n    console.log(arr);\n    setCategoriesList(arr);\n  };\n\n  const handleDeleteItem = (index: number) => {\n    const arr: any = [...categoriesList];\n\n    // logic to delete an item starts\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    // logic to delete an item end\n\n    setCategoriesList(arr);\n    console.log(arr);\n  };\n\n  const handleError = (errors: typeof form.errors) => {\n    if (errors.name) {\n      showNotification({ message: \"Please fill name field\", color: \"red\" });\n    }\n  };\n  const handleUpdate = (index: number) => {\n    const arr: any = [...categoriesList];\n    arr[index] = catUpdateValue;\n\n    setCategoriesList(arr);\n\n    console.log(arr);\n  };\n\n  const handleSubmit = (values: typeof form.values) => {\n    let arr: any = [];\n    console.log(values, \"values\");\n  };\n\n  return (\n    <form onSubmit={form.onSubmit(handleSubmit, handleError)}>\n      <TextInput\n        required\n        label=\"Enter Origin Port\"\n        placeholder=\"Eg. chennai\"\n        {...form.getInputProps(\"originPort\")}\n      />\n\n      <Space h=\"md\" />\n      {categoriesList.map((k, i) => {\n        return (\n          <Group spacing=\"md\" key={i}>\n            <TextInput\n              required\n              label=\"Enter Destination Port\"\n              placeholder=\"Eg. singapore\"\n              data={[]}\n              {...form.getInputProps(\"destination\")}\n            />\n\n\n            <NumberInput\n              required\n              label=\"Enter SHL Charges\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"shl\")}\n            />\n            <NumberInput\n                  required\n                  label=\"Surrender\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"surrender\")}\n                />\n            <NumberInput\n                  required\n                  label=\"THC\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"thc\")}\n                />\n            <div\n              style={{\n                display: \"inline-flex\",\n                alignItems: \"bottom\",\n                // width: \"100%\",\n                marginTop: `3%`,\n              }}\n            >\n              <Group spacing=\"md\" position=\"right\" margin-bottom=\"5px\">\n                <ActionIcon\n                  variant=\"filled\"\n                  onClick={() => handleDeleteItem(i)}\n                >\n                  <Minus size={20} />\n                </ActionIcon>\n              </Group>\n            </div>\n\n            <Grid>\n              \n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"B/L Fee\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"blfee\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"Seal\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"Seal\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"Convenience Fees\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"cf\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"MUC\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"muc\")}\n                />\n              </Grid.Col>\n              <Grid.Col span={2}>\n                <NumberInput\n                  required\n                  label=\"COO\"\n                  placeholder=\"Eg. 26500\"\n                  {...form.getInputProps(\"coo\")}\n                />\n              </Grid.Col>\n            </Grid>\n\n          </Group>\n        );\n      })}\n\n      <Space h=\"md\" />\n\n      <Group>\n        <TextInput\n          required\n          label=\"Enter Destination Port\"\n          placeholder=\"Eg. singapore\"\n          data={[]}\n          {...form.getInputProps(\"destination\")}\n        />\n\n        <NumberInput\n          required\n          label=\"Enter SLL Charges\"\n          placeholder=\"Eg. 26500\"\n          {...form.getInputProps(\"shl\")}\n        />\n        <NumberInput\n              required\n              label=\"THC\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"thc\")}\n            />\n            <NumberInput\n              required\n              label=\"B/L Fee\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"blfee\")}\n            />\n         <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"bottom\",\n            // width: \"100%\",\n            marginTop: `3%`,\n          }}\n        >\n          <Button onClick={handleClick}>+</Button>\n         \n        </div>\n        <Grid>\n\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"Surrender\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"surrender\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"Convenience Fees\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"cf\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"MUC\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"muc\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"Seal\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"Seal\")}\n            />\n          </Grid.Col>\n          <Grid.Col span={2}>\n            <NumberInput\n              required\n              label=\"COO\"\n              placeholder=\"Eg. 26500\"\n              {...form.getInputProps(\"coo\")}\n            />\n          </Grid.Col>\n        </Grid>\n        <div\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"bottom\",\n            width: \"100%\",\n            marginTop: `3%`,\n          }}\n        >\n         \n          \n        </div>\n      </Group>\n\n      <Space h=\"lg\" />\n\n      <Group position=\"right\" mt=\"md\">\n        <Button type=\"submit\">Save</Button>\n      </Group>\n    </form>\n  );\n}\n\nexport default EditShlForm;\n",{"ruleId":"481","severity":1,"message":"482","line":61,"column":10,"nodeType":"483","messageId":"484","endLine":61,"endColumn":20},{"ruleId":"481","severity":1,"message":"485","line":61,"column":22,"nodeType":"483","messageId":"484","endLine":61,"endColumn":35},{"ruleId":"481","severity":1,"message":"486","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":26},{"ruleId":"481","severity":1,"message":"488","line":3,"column":3,"nodeType":"483","messageId":"484","endLine":3,"endColumn":13},{"ruleId":"481","severity":1,"message":"489","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":27,"column":9,"nodeType":"483","messageId":"484","endLine":27,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":26},{"ruleId":"481","severity":1,"message":"490","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":26},{"ruleId":"481","severity":1,"message":"488","line":3,"column":3,"nodeType":"483","messageId":"484","endLine":3,"endColumn":13},{"ruleId":"481","severity":1,"message":"489","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":27,"column":9,"nodeType":"483","messageId":"484","endLine":27,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":26},{"ruleId":"481","severity":1,"message":"491","line":8,"column":9,"nodeType":"483","messageId":"484","endLine":8,"endColumn":14},{"ruleId":"481","severity":1,"message":"490","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"492","line":3,"column":23,"nodeType":"483","messageId":"484","endLine":3,"endColumn":28},{"ruleId":"481","severity":1,"message":"493","line":6,"column":10,"nodeType":"483","messageId":"484","endLine":6,"endColumn":21},{"ruleId":"481","severity":1,"message":"494","line":8,"column":10,"nodeType":"483","messageId":"484","endLine":8,"endColumn":20},{"ruleId":"481","severity":1,"message":"495","line":17,"column":10,"nodeType":"483","messageId":"484","endLine":17,"endColumn":24},{"ruleId":"481","severity":1,"message":"496","line":19,"column":10,"nodeType":"483","messageId":"484","endLine":19,"endColumn":18},{"ruleId":"497","severity":1,"message":"498","line":37,"column":89,"nodeType":"499","messageId":"500","endLine":37,"endColumn":90,"suggestions":"501"},{"ruleId":"481","severity":1,"message":"502","line":8,"column":3,"nodeType":"483","messageId":"484","endLine":8,"endColumn":9},{"ruleId":"481","severity":1,"message":"503","line":22,"column":11,"nodeType":"483","messageId":"484","endLine":22,"endColumn":18},{"ruleId":"481","severity":1,"message":"491","line":23,"column":9,"nodeType":"483","messageId":"484","endLine":23,"endColumn":14},{"ruleId":"481","severity":1,"message":"504","line":4,"column":3,"nodeType":"483","messageId":"484","endLine":4,"endColumn":13},{"ruleId":"481","severity":1,"message":"489","line":13,"column":3,"nodeType":"483","messageId":"484","endLine":13,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":31,"column":9,"nodeType":"483","messageId":"484","endLine":31,"endColumn":26},{"ruleId":"481","severity":1,"message":"490","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"505","line":6,"column":3,"nodeType":"483","messageId":"484","endLine":6,"endColumn":14},{"ruleId":"481","severity":1,"message":"506","line":10,"column":10,"nodeType":"483","messageId":"484","endLine":10,"endColumn":26},{"ruleId":"481","severity":1,"message":"507","line":10,"column":28,"nodeType":"483","messageId":"484","endLine":10,"endColumn":36},{"ruleId":"481","severity":1,"message":"490","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":26},{"ruleId":"481","severity":1,"message":"508","line":5,"column":3,"nodeType":"483","messageId":"484","endLine":5,"endColumn":12},{"ruleId":"481","severity":1,"message":"506","line":10,"column":10,"nodeType":"483","messageId":"484","endLine":10,"endColumn":26},{"ruleId":"481","severity":1,"message":"490","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"505","line":6,"column":3,"nodeType":"483","messageId":"484","endLine":6,"endColumn":14},{"ruleId":"481","severity":1,"message":"509","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":8},{"ruleId":"481","severity":1,"message":"510","line":19,"column":10,"nodeType":"483","messageId":"484","endLine":19,"endColumn":15},{"ruleId":"511","severity":1,"message":"512","line":181,"column":18,"nodeType":"483","messageId":"513","endLine":181,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":204,"column":29,"nodeType":"516","messageId":"517","endLine":204,"endColumn":31},{"ruleId":"481","severity":1,"message":"490","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"518","line":11,"column":10,"nodeType":"483","messageId":"484","endLine":11,"endColumn":14},{"ruleId":"481","severity":1,"message":"492","line":11,"column":23,"nodeType":"483","messageId":"484","endLine":11,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":26},{"ruleId":"481","severity":1,"message":"519","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":13},{"ruleId":"481","severity":1,"message":"520","line":18,"column":10,"nodeType":"483","messageId":"484","endLine":18,"endColumn":22},{"ruleId":"481","severity":1,"message":"521","line":28,"column":10,"nodeType":"483","messageId":"484","endLine":28,"endColumn":24},{"ruleId":"481","severity":1,"message":"522","line":29,"column":10,"nodeType":"483","messageId":"484","endLine":29,"endColumn":24},{"ruleId":"481","severity":1,"message":"496","line":31,"column":10,"nodeType":"483","messageId":"484","endLine":31,"endColumn":18},{"ruleId":"481","severity":1,"message":"490","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"523","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":16},{"ruleId":"481","severity":1,"message":"524","line":2,"column":31,"nodeType":"483","messageId":"484","endLine":2,"endColumn":36},{"ruleId":"481","severity":1,"message":"525","line":2,"column":38,"nodeType":"483","messageId":"484","endLine":2,"endColumn":43},{"ruleId":"481","severity":1,"message":"526","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":19},{"ruleId":"481","severity":1,"message":"527","line":5,"column":27,"nodeType":"483","messageId":"484","endLine":5,"endColumn":30},{"ruleId":"481","severity":1,"message":"488","line":6,"column":18,"nodeType":"483","messageId":"484","endLine":6,"endColumn":28},{"ruleId":"481","severity":1,"message":"528","line":6,"column":30,"nodeType":"483","messageId":"484","endLine":6,"endColumn":36},{"ruleId":"481","severity":1,"message":"529","line":7,"column":27,"nodeType":"483","messageId":"484","endLine":7,"endColumn":33},{"ruleId":"481","severity":1,"message":"530","line":7,"column":35,"nodeType":"483","messageId":"484","endLine":7,"endColumn":41},{"ruleId":"481","severity":1,"message":"531","line":7,"column":43,"nodeType":"483","messageId":"484","endLine":7,"endColumn":48},{"ruleId":"481","severity":1,"message":"532","line":8,"column":8,"nodeType":"483","messageId":"484","endLine":8,"endColumn":11},{"ruleId":"481","severity":1,"message":"533","line":9,"column":10,"nodeType":"483","messageId":"484","endLine":9,"endColumn":22},{"ruleId":"481","severity":1,"message":"534","line":15,"column":10,"nodeType":"483","messageId":"484","endLine":15,"endColumn":18},{"ruleId":"481","severity":1,"message":"535","line":16,"column":10,"nodeType":"483","messageId":"484","endLine":16,"endColumn":26},{"ruleId":"481","severity":1,"message":"536","line":42,"column":9,"nodeType":"483","messageId":"484","endLine":42,"endColumn":20},{"ruleId":"537","severity":1,"message":"538","line":92,"column":11,"nodeType":"539","endLine":92,"endColumn":64},{"ruleId":"481","severity":1,"message":"540","line":1,"column":51,"nodeType":"483","messageId":"484","endLine":1,"endColumn":57},{"ruleId":"481","severity":1,"message":"523","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":16},{"ruleId":"481","severity":1,"message":"524","line":2,"column":31,"nodeType":"483","messageId":"484","endLine":2,"endColumn":36},{"ruleId":"481","severity":1,"message":"525","line":2,"column":38,"nodeType":"483","messageId":"484","endLine":2,"endColumn":43},{"ruleId":"481","severity":1,"message":"526","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":19},{"ruleId":"481","severity":1,"message":"527","line":5,"column":27,"nodeType":"483","messageId":"484","endLine":5,"endColumn":30},{"ruleId":"481","severity":1,"message":"488","line":6,"column":18,"nodeType":"483","messageId":"484","endLine":6,"endColumn":28},{"ruleId":"481","severity":1,"message":"528","line":6,"column":30,"nodeType":"483","messageId":"484","endLine":6,"endColumn":36},{"ruleId":"481","severity":1,"message":"541","line":8,"column":8,"nodeType":"483","messageId":"484","endLine":8,"endColumn":23},{"ruleId":"481","severity":1,"message":"542","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":24},{"ruleId":"481","severity":1,"message":"543","line":52,"column":9,"nodeType":"483","messageId":"484","endLine":52,"endColumn":19},{"ruleId":"481","severity":1,"message":"536","line":77,"column":9,"nodeType":"483","messageId":"484","endLine":77,"endColumn":20},{"ruleId":"481","severity":1,"message":"544","line":113,"column":11,"nodeType":"483","messageId":"484","endLine":113,"endColumn":23},{"ruleId":"537","severity":1,"message":"538","line":169,"column":11,"nodeType":"539","endLine":169,"endColumn":64},{"ruleId":"545","severity":1,"message":"546","line":10,"column":11,"nodeType":"483","messageId":"484","endLine":10,"endColumn":19},{"ruleId":"481","severity":1,"message":"489","line":13,"column":3,"nodeType":"483","messageId":"484","endLine":13,"endColumn":8},{"ruleId":"481","severity":1,"message":"520","line":25,"column":21,"nodeType":"483","messageId":"484","endLine":25,"endColumn":33},{"ruleId":"481","severity":1,"message":"486","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":10,"column":3,"nodeType":"483","messageId":"484","endLine":10,"endColumn":9},{"ruleId":"481","severity":1,"message":"489","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":7,"column":3,"nodeType":"483","messageId":"484","endLine":7,"endColumn":9},{"ruleId":"481","severity":1,"message":"518","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":14},{"ruleId":"481","severity":1,"message":"492","line":12,"column":23,"nodeType":"483","messageId":"484","endLine":12,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":13,"column":10,"nodeType":"483","messageId":"484","endLine":13,"endColumn":26},{"ruleId":"481","severity":1,"message":"548","line":16,"column":10,"nodeType":"483","messageId":"484","endLine":16,"endColumn":19},{"ruleId":"481","severity":1,"message":"549","line":19,"column":27,"nodeType":"483","messageId":"484","endLine":19,"endColumn":45},{"ruleId":"481","severity":1,"message":"550","line":20,"column":26,"nodeType":"483","messageId":"484","endLine":20,"endColumn":43},{"ruleId":"481","severity":1,"message":"496","line":23,"column":10,"nodeType":"483","messageId":"484","endLine":23,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":23,"column":20,"nodeType":"483","messageId":"484","endLine":23,"endColumn":31},{"ruleId":"481","severity":1,"message":"552","line":69,"column":9,"nodeType":"483","messageId":"484","endLine":69,"endColumn":21},{"ruleId":"481","severity":1,"message":"489","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":8},{"ruleId":"481","severity":1,"message":"520","line":25,"column":21,"nodeType":"483","messageId":"484","endLine":25,"endColumn":33},{"ruleId":"481","severity":1,"message":"486","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":11,"column":3,"nodeType":"483","messageId":"484","endLine":11,"endColumn":9},{"ruleId":"481","severity":1,"message":"489","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":26},{"ruleId":"481","severity":1,"message":"518","line":11,"column":10,"nodeType":"483","messageId":"484","endLine":11,"endColumn":14},{"ruleId":"481","severity":1,"message":"492","line":11,"column":23,"nodeType":"483","messageId":"484","endLine":11,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":26},{"ruleId":"481","severity":1,"message":"548","line":15,"column":10,"nodeType":"483","messageId":"484","endLine":15,"endColumn":19},{"ruleId":"481","severity":1,"message":"549","line":18,"column":27,"nodeType":"483","messageId":"484","endLine":18,"endColumn":45},{"ruleId":"481","severity":1,"message":"550","line":19,"column":26,"nodeType":"483","messageId":"484","endLine":19,"endColumn":43},{"ruleId":"481","severity":1,"message":"496","line":22,"column":10,"nodeType":"483","messageId":"484","endLine":22,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":22,"column":20,"nodeType":"483","messageId":"484","endLine":22,"endColumn":31},{"ruleId":"481","severity":1,"message":"552","line":68,"column":9,"nodeType":"483","messageId":"484","endLine":68,"endColumn":21},{"ruleId":"481","severity":1,"message":"489","line":13,"column":3,"nodeType":"483","messageId":"484","endLine":13,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":26},{"ruleId":"481","severity":1,"message":"518","line":11,"column":10,"nodeType":"483","messageId":"484","endLine":11,"endColumn":14},{"ruleId":"481","severity":1,"message":"492","line":11,"column":23,"nodeType":"483","messageId":"484","endLine":11,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":26},{"ruleId":"481","severity":1,"message":"553","line":15,"column":10,"nodeType":"483","messageId":"484","endLine":15,"endColumn":25},{"ruleId":"481","severity":1,"message":"549","line":18,"column":27,"nodeType":"483","messageId":"484","endLine":18,"endColumn":45},{"ruleId":"481","severity":1,"message":"550","line":19,"column":26,"nodeType":"483","messageId":"484","endLine":19,"endColumn":43},{"ruleId":"481","severity":1,"message":"496","line":22,"column":10,"nodeType":"483","messageId":"484","endLine":22,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":22,"column":20,"nodeType":"483","messageId":"484","endLine":22,"endColumn":31},{"ruleId":"481","severity":1,"message":"552","line":68,"column":9,"nodeType":"483","messageId":"484","endLine":68,"endColumn":21},{"ruleId":"481","severity":1,"message":"554","line":78,"column":9,"nodeType":"483","messageId":"484","endLine":78,"endColumn":17},{"ruleId":"481","severity":1,"message":"547","line":11,"column":3,"nodeType":"483","messageId":"484","endLine":11,"endColumn":9},{"ruleId":"481","severity":1,"message":"489","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":26},{"ruleId":"481","severity":1,"message":"489","line":13,"column":3,"nodeType":"483","messageId":"484","endLine":13,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":10,"column":3,"nodeType":"483","messageId":"484","endLine":10,"endColumn":9},{"ruleId":"481","severity":1,"message":"489","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":7,"column":3,"nodeType":"483","messageId":"484","endLine":7,"endColumn":9},{"ruleId":"481","severity":1,"message":"555","line":9,"column":3,"nodeType":"483","messageId":"484","endLine":9,"endColumn":7},{"ruleId":"481","severity":1,"message":"518","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":14},{"ruleId":"481","severity":1,"message":"492","line":12,"column":23,"nodeType":"483","messageId":"484","endLine":12,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":13,"column":10,"nodeType":"483","messageId":"484","endLine":13,"endColumn":26},{"ruleId":"481","severity":1,"message":"556","line":16,"column":10,"nodeType":"483","messageId":"484","endLine":16,"endColumn":27},{"ruleId":"481","severity":1,"message":"549","line":19,"column":27,"nodeType":"483","messageId":"484","endLine":19,"endColumn":45},{"ruleId":"481","severity":1,"message":"550","line":20,"column":26,"nodeType":"483","messageId":"484","endLine":20,"endColumn":43},{"ruleId":"481","severity":1,"message":"496","line":23,"column":10,"nodeType":"483","messageId":"484","endLine":23,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":23,"column":20,"nodeType":"483","messageId":"484","endLine":23,"endColumn":31},{"ruleId":"481","severity":1,"message":"552","line":69,"column":9,"nodeType":"483","messageId":"484","endLine":69,"endColumn":21},{"ruleId":"481","severity":1,"message":"554","line":79,"column":9,"nodeType":"483","messageId":"484","endLine":79,"endColumn":17},{"ruleId":"481","severity":1,"message":"509","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":8},{"ruleId":"481","severity":1,"message":"489","line":13,"column":3,"nodeType":"483","messageId":"484","endLine":13,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":27,"column":9,"nodeType":"483","messageId":"484","endLine":27,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":26},{"ruleId":"481","severity":1,"message":"509","line":10,"column":3,"nodeType":"483","messageId":"484","endLine":10,"endColumn":8},{"ruleId":"481","severity":1,"message":"547","line":11,"column":3,"nodeType":"483","messageId":"484","endLine":11,"endColumn":9},{"ruleId":"481","severity":1,"message":"489","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":26},{"ruleId":"481","severity":1,"message":"505","line":6,"column":3,"nodeType":"483","messageId":"484","endLine":6,"endColumn":14},{"ruleId":"481","severity":1,"message":"547","line":7,"column":3,"nodeType":"483","messageId":"484","endLine":7,"endColumn":9},{"ruleId":"481","severity":1,"message":"557","line":9,"column":3,"nodeType":"483","messageId":"484","endLine":9,"endColumn":13},{"ruleId":"481","severity":1,"message":"518","line":11,"column":10,"nodeType":"483","messageId":"484","endLine":11,"endColumn":14},{"ruleId":"481","severity":1,"message":"558","line":11,"column":16,"nodeType":"483","messageId":"484","endLine":11,"endColumn":21},{"ruleId":"481","severity":1,"message":"492","line":11,"column":23,"nodeType":"483","messageId":"484","endLine":11,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":26},{"ruleId":"481","severity":1,"message":"559","line":15,"column":10,"nodeType":"483","messageId":"484","endLine":15,"endColumn":22},{"ruleId":"481","severity":1,"message":"549","line":18,"column":27,"nodeType":"483","messageId":"484","endLine":18,"endColumn":45},{"ruleId":"481","severity":1,"message":"550","line":19,"column":26,"nodeType":"483","messageId":"484","endLine":19,"endColumn":43},{"ruleId":"481","severity":1,"message":"496","line":22,"column":10,"nodeType":"483","messageId":"484","endLine":22,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":22,"column":20,"nodeType":"483","messageId":"484","endLine":22,"endColumn":31},{"ruleId":"481","severity":1,"message":"560","line":42,"column":9,"nodeType":"483","messageId":"484","endLine":42,"endColumn":25},{"ruleId":"481","severity":1,"message":"561","line":49,"column":9,"nodeType":"483","messageId":"484","endLine":49,"endColumn":25},{"ruleId":"481","severity":1,"message":"552","line":68,"column":9,"nodeType":"483","messageId":"484","endLine":68,"endColumn":21},{"ruleId":"481","severity":1,"message":"554","line":78,"column":9,"nodeType":"483","messageId":"484","endLine":78,"endColumn":17},{"ruleId":"481","severity":1,"message":"489","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":28,"column":9,"nodeType":"483","messageId":"484","endLine":28,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":10,"column":3,"nodeType":"483","messageId":"484","endLine":10,"endColumn":9},{"ruleId":"481","severity":1,"message":"489","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":8},{"ruleId":"481","severity":1,"message":"486","line":29,"column":9,"nodeType":"483","messageId":"484","endLine":29,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":30,"column":9,"nodeType":"483","messageId":"484","endLine":30,"endColumn":26},{"ruleId":"481","severity":1,"message":"547","line":7,"column":3,"nodeType":"483","messageId":"484","endLine":7,"endColumn":9},{"ruleId":"481","severity":1,"message":"518","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":14},{"ruleId":"481","severity":1,"message":"492","line":12,"column":23,"nodeType":"483","messageId":"484","endLine":12,"endColumn":28},{"ruleId":"481","severity":1,"message":"506","line":13,"column":10,"nodeType":"483","messageId":"484","endLine":13,"endColumn":26},{"ruleId":"481","severity":1,"message":"548","line":16,"column":10,"nodeType":"483","messageId":"484","endLine":16,"endColumn":19},{"ruleId":"481","severity":1,"message":"549","line":19,"column":27,"nodeType":"483","messageId":"484","endLine":19,"endColumn":45},{"ruleId":"481","severity":1,"message":"550","line":20,"column":26,"nodeType":"483","messageId":"484","endLine":20,"endColumn":43},{"ruleId":"481","severity":1,"message":"496","line":23,"column":10,"nodeType":"483","messageId":"484","endLine":23,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":23,"column":20,"nodeType":"483","messageId":"484","endLine":23,"endColumn":31},{"ruleId":"481","severity":1,"message":"552","line":69,"column":9,"nodeType":"483","messageId":"484","endLine":69,"endColumn":21},{"ruleId":"481","severity":1,"message":"554","line":79,"column":9,"nodeType":"483","messageId":"484","endLine":79,"endColumn":17},"@typescript-eslint/no-unused-vars","'productIds' is assigned a value but never used.","Identifier","unusedVar","'setProductIds' is assigned a value but never used.","'activeFilter' is assigned a value but never used.","'handleRadioChange' is assigned a value but never used.","'SimpleGrid' is defined but never used.","'Badge' is defined but never used.","'useEffect' is defined but never used.","'theme' is assigned a value but never used.","'Check' is defined but never used.","'arrayBuffer' is defined but never used.","'DialogBody' is defined but never used.","'catUpdateValue' is assigned a value but never used.","'allValue' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["562","563"],"'Button' is defined but never used.","'classes' is assigned a value but never used.","'RadioProps' is defined but never used.","'NumberInput' is defined but never used.","'ArrowRightCircle' is defined but never used.","'Category' is defined but never used.","'TextInput' is defined but never used.","'Input' is defined but never used.","'Title' is defined but never used.","no-self-assign","'totalsum' is assigned to itself.","selfAssignment","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Plus' is defined but never used.","'axios' is defined but never used.","'riceCategory' is defined but never used.","'regUpdateValue' is assigned a value but never used.","'numUpdateValue' is assigned a value but never used.","'Center' is defined but never used.","'Image' is defined but never used.","'Group' is defined but never used.","'Container' is defined but never used.","'Box' is defined but never used.","'Loader' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Otp' is defined but never used.","'Notification' is defined but never used.","'getValue' is defined but never used.","'setConstantValue' is defined but never used.","'handleError' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'DashboardScreen' is defined but never used.","'OutputFileType' is defined but never used.","'resetTimer' is assigned a value but never used.","'payload' is assigned a value but never used.","no-unused-vars","'navigate' is assigned a value but never used.","'Select' is defined but never used.","'manageCha' is defined but never used.","'setCategoriesValue' is assigned a value but never used.","'setCatUpdateValue' is assigned a value but never used.","'setAllValue' is assigned a value but never used.","'handleUpdate' is assigned a value but never used.","'manageTransport' is defined but never used.","'arr' is assigned a value but never used.","'Grid' is defined but never used.","'managePwipService' is defined but never used.","'ActionIcon' is defined but never used.","'Minus' is defined but never used.","'manageOthers' is defined but never used.","'handleClick' is assigned a value but never used.","'handleDeleteItem' is assigned a value but never used.",{"messageId":"564","fix":"565","desc":"566"},{"messageId":"567","fix":"568","desc":"569"},"removeEscape",{"range":"570","text":"571"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"572","text":"573"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1360,1361],"",[1360,1360],"\\"]